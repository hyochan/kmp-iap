"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[8042],{2870:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=r(4848),t=r(8453);const i={title:"Basic Store Implementation",sidebar_label:"Basic Store",sidebar_position:1},s="Basic Store Implementation",a={id:"examples/basic-store",title:"Basic Store Implementation",description:"A simple store implementation demonstrating core kmp-iap concepts and basic purchase flow. Perfect for getting started with in-app purchases in Kotlin Multiplatform.",source:"@site/docs/examples/basic-store.md",sourceDirName:"examples",slug:"/examples/basic-store",permalink:"/kmp-iap/docs/examples/basic-store",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/docs/examples/basic-store.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Basic Store Implementation",sidebar_label:"Basic Store",sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Error Codes",permalink:"/kmp-iap/docs/api/error-codes"},next:{title:"Subscription Store",permalink:"/kmp-iap/docs/examples/subscription-store"}},c={},l=[{value:"Key Features Demonstrated",id:"key-features-demonstrated",level:2},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Complete Implementation",id:"complete-implementation",level:2},{value:"Key Features Explained",id:"key-features-explained",level:2},{value:"1. Connection Management",id:"1-connection-management",level:3},{value:"2. Product Loading (OpenIAP-Compliant)",id:"2-product-loading-openiap-compliant",level:3},{value:"3. Purchase Flow (OpenIAP-Compliant)",id:"3-purchase-flow-openiap-compliant",level:3},{value:"4. Transaction Finishing",id:"4-transaction-finishing",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"Usage Instructions",id:"usage-instructions",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Product Types",id:"product-types",level:3},{value:"Custom Error Handling",id:"custom-error-handling",level:3},{value:"Loading States",id:"loading-states",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"basic-store-implementation",children:"Basic Store Implementation"}),"\n",(0,o.jsx)(n.p,{children:"A simple store implementation demonstrating core kmp-iap concepts and basic purchase flow. Perfect for getting started with in-app purchases in Kotlin Multiplatform."}),"\n",(0,o.jsx)(n.h2,{id:"key-features-demonstrated",children:"Key Features Demonstrated"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Connection Management"})," - Initialize and manage store connection"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Product Loading"})," - Fetch products from both App Store and Google Play"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Purchase Flow"})," - Complete purchase process with user feedback"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Transaction Finishing"})," - Properly complete transactions"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Error Handling"})," - Handle common purchase errors gracefully"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Platform Differences"})," - Handle iOS and Android specific requirements"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,o.jsx)(n.strong,{children:"Important"}),": This example handles key differences between iOS and Android:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"iOS"}),": Uses StoreKit 2 (iOS 15+) implemented in Swift"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Android"}),": Uses Google Play Billing Library v7"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Receipt Handling"}),": Different receipt formats and validation approaches"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transaction States"}),": Platform-specific state management"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"complete-implementation",children:"Complete Implementation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'import androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.types.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.launch\n\nclass BasicStoreApp : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                BasicStoreScreen()\n            }\n        }\n    }\n}\n\nclass BasicStoreViewModel : ViewModel() {\n    \n    // State management\n    data class StoreState(\n        val isConnected: Boolean = false,\n        val isLoading: Boolean = false,\n        val products: List<Product> = emptyList(),\n        val errorMessage: String? = null,\n        val latestPurchase: Purchase? = null,\n        val processingProductId: String? = null\n    )\n    \n    private val _state = MutableStateFlow(StoreState())\n    val state: StateFlow<StoreState> = _state.asStateFlow()\n    \n    // Product IDs - Replace with your actual product IDs\n    private val productIds = listOf(\n        "coins_100",\n        "coins_500", \n        "remove_ads",\n        "premium_upgrade"\n    )\n    \n    init {\n        initializeStore()\n        observeStates()\n    }\n    \n    private fun initializeStore() {\n        viewModelScope.launch {\n            _state.update { it.copy(isLoading = true, errorMessage = null) }\n            \n            try {\n                // Initialize connection using kmpIapInstance\n                kmpIapInstance.initConnection()\n                _state.update { it.copy(isConnected = true) }\n\n                // Load products after connection\n                loadProducts()\n\n            } catch (e: Exception) {\n                showError("Failed to initialize store: ${e.message}")\n                _state.update { it.copy(isConnected = false) }\n            }\n        }\n    }\n    \n    private fun observeStates() {\n        // Observe purchase updates\n        viewModelScope.launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                handlePurchaseSuccess(purchase)\n            }\n        }\n        \n        // Observe purchase errors\n        viewModelScope.launch {\n            kmpIapInstance.purchaseErrorListener.collect { error ->\n                handlePurchaseError(error)\n            }\n        }\n    }\n    \n    private suspend fun loadProducts() {\n        _state.update { it.copy(isLoading = true, errorMessage = null) }\n        \n        try {\n            val products = kmpIapInstance.fetchProducts {\n                skus = productIds\n                type = ProductQueryType.InApp\n            }\n            _state.update { it.copy(products = products, isLoading = false) }\n\n            products.forEach { product ->\n                println("Product: ${product.id} - ${product.displayPrice}")\n            }\n\n        } catch (e: PurchaseError) {\n            showError("Failed to load products: ${e.message}")\n        } finally {\n            _state.update { it.copy(isLoading = false) }\n        }\n    }\n    \n    private suspend fun handlePurchaseSuccess(purchase: Purchase) {\n        println("\u2705 Purchase successful: ${purchase.productId}")\n        \n        _state.update { \n            it.copy(\n                latestPurchase = purchase,\n                errorMessage = null,\n                processingProductId = null\n            )\n        }\n        \n        try {\n            // 1. Here you would typically verify the purchase with your server\n            val isValid = verifyPurchase(purchase)\n            \n            if (isValid) {\n                // 2. Deliver the product to the user\n                deliverProduct(purchase.productId)\n                \n                // 3. Finish the transaction\n                kmpIapInstance.finishTransaction(\n                    purchase = purchase.toPurchaseInput(),\n                    isConsumable = isConsumableProduct(purchase.productId)\n                )\n\n                println("\u2705 Purchase completed and delivered")\n\n                // 4. Clear purchase state\n                _state.update { it.copy(latestPurchase = null) }\n            } else {\n                showError("Purchase verification failed")\n            }\n            \n        } catch (e: Exception) {\n            showError("Error processing purchase: ${e.message}")\n        }\n    }\n    \n    private fun handlePurchaseError(error: PurchaseError) {\n        println("\u274c Purchase failed: ${error.message}")\n        \n        _state.update { \n            it.copy(\n                latestPurchase = null,\n                processingProductId = null\n            )\n        }\n        \n        // Handle specific error codes\n        when (error.code) {\n            ErrorCode.UserCancelled -> {\n                // Don\'t show error for user cancellation\n                println("User cancelled purchase")\n            }\n\n            ErrorCode.NetworkError -> {\n                showError("Network error. Please check your connection and try again.")\n            }\n\n            ErrorCode.AlreadyOwned -> {\n                showError("You already own this item. Try restoring your purchases.")\n            }\n\n            else -> {\n                showError(error.message)\n            }\n        }\n    }\n    \n    // Verify purchase with server (mock implementation)\n    private suspend fun verifyPurchase(purchase: Purchase): Boolean {\n        // In a real app, send the receipt to your server for verification\n        println("\ud83d\udd0d Verifying purchase: ${purchase.productId}")\n        println("Receipt: ${purchase.transactionReceipt?.take(50)}...")\n        \n        // Simulate server verification\n        return try {\n            // In production, make actual API call to your server\n            // val result = api.verifyPurchase(purchase)\n            // return result.isValid\n            true // Mock successful verification\n        } catch (e: Exception) {\n            println("Verification failed: ${e.message}")\n            false\n        }\n    }\n    \n    // Deliver the purchased product to the user\n    private fun deliverProduct(productId: String) {\n        println("\ud83c\udf81 Delivering product: $productId")\n        \n        // Implement your product delivery logic here\n        when (productId) {\n            "coins_100" -> {\n                // Add 100 coins to user\'s account\n                println("Added 100 coins to user account")\n            }\n            \n            "coins_500" -> {\n                // Add 500 coins to user\'s account\n                println("Added 500 coins to user account")\n            }\n            \n            "remove_ads" -> {\n                // Remove ads for user\n                println("Removed ads for user")\n            }\n            \n            "premium_upgrade" -> {\n                // Upgrade user to premium\n                println("Upgraded user to premium")\n            }\n            \n            else -> {\n                println("Unknown product: $productId")\n            }\n        }\n    }\n    \n    // Check if a product is consumable\n    private fun isConsumableProduct(productId: String): Boolean {\n        // Define which products are consumable\n        val consumableProducts = listOf("coins_100", "coins_500")\n        return consumableProducts.contains(productId)\n    }\n    \n    // Make a purchase\n    fun makePurchase(productId: String) {\n        if (!_state.value.isConnected) {\n            showError("Not connected to store")\n            return\n        }\n        \n        viewModelScope.launch {\n            _state.update { \n                it.copy(\n                    processingProductId = productId,\n                    errorMessage = null\n                )\n            }\n            \n            try {\n                kmpIapInstance.requestPurchase {\n                    ios {\n                        sku = productId\n                        quantity = 1\n                    }\n                    android {\n                        skus = listOf(productId)\n                    }\n                }\n\n                println("\ud83d\uded2 Purchase requested for: $productId")\n\n            } catch (e: Exception) {\n                showError("Failed to request purchase: ${e.message}")\n                _state.update { it.copy(processingProductId = null) }\n            }\n        }\n    }\n    \n    // Restore purchases\n    fun restorePurchases() {\n        viewModelScope.launch {\n            _state.update { it.copy(isLoading = true, errorMessage = null) }\n            \n            try {\n                // Get available purchases\n                val purchases = kmpIapInstance.getAvailablePurchases()\n                purchases.forEach { purchase ->\n                    // Process non-consumable purchases\n                    if (!isConsumableProduct(purchase.productId)) {\n                        deliverProduct(purchase.productId)\n                    }\n                }\n                \n                showMessage("Restored ${purchases.size} purchases")\n                \n            } catch (e: Exception) {\n                showError("Failed to restore purchases: ${e.message}")\n            } finally {\n                _state.update { it.copy(isLoading = false) }\n            }\n        }\n    }\n    \n    fun reloadProducts() {\n        viewModelScope.launch {\n            loadProducts()\n        }\n    }\n    \n    private fun showError(message: String) {\n        _state.update { it.copy(errorMessage = message) }\n    }\n    \n    private fun showMessage(message: String) {\n        // In a real app, show a snackbar or toast\n        println("\u2139\ufe0f $message")\n    }\n    \n    fun clearError() {\n        _state.update { it.copy(errorMessage = null) }\n    }\n    \n    private fun getUserId(): String {\n        // Return a hashed user ID for fraud prevention\n        return "user_123_hash"\n    }\n    \n    override fun onCleared() {\n        super.onCleared()\n        // Clean up connections\n        viewModelScope.launch {\n            kmpIapInstance.endConnection()\n        }\n    }\n}\n\n@Composable\nfun BasicStoreScreen(\n    viewModel: BasicStoreViewModel = viewModel()\n) {\n    val state by viewModel.state.collectAsState()\n    \n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text("Basic Store") },\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = if (state.isConnected) \n                        MaterialTheme.colorScheme.primary \n                    else \n                        MaterialTheme.colorScheme.error\n                ),\n                actions = {\n                    IconButton(onClick = viewModel::reloadProducts) {\n                        Icon(Icons.Default.Refresh, contentDescription = "Reload")\n                    }\n                    IconButton(onClick = viewModel::restorePurchases) {\n                        Icon(Icons.Default.Restore, contentDescription = "Restore")\n                    }\n                }\n            )\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n        ) {\n            // Connection status\n            ConnectionStatus(isConnected = state.isConnected)\n            \n            // Error message\n            state.errorMessage?.let { error ->\n                ErrorBanner(\n                    message = error,\n                    onDismiss = viewModel::clearError\n                )\n            }\n            \n            // Latest purchase info\n            state.latestPurchase?.let { purchase ->\n                PurchaseInfo(purchase = purchase)\n            }\n            \n            // Products list\n            Box(modifier = Modifier.fillMaxSize()) {\n                when {\n                    state.isLoading && state.products.isEmpty() -> {\n                        CircularProgressIndicator(\n                            modifier = Modifier.align(Alignment.Center)\n                        )\n                    }\n                    \n                    state.products.isEmpty() -> {\n                        EmptyProducts(onReload = viewModel::reloadProducts)\n                    }\n                    \n                    else -> {\n                        ProductsList(\n                            products = state.products,\n                            processingProductId = state.processingProductId,\n                            onPurchase = viewModel::makePurchase\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ConnectionStatus(isConnected: Boolean) {\n    Surface(\n        modifier = Modifier.fillMaxWidth(),\n        color = if (isConnected) \n            MaterialTheme.colorScheme.primaryContainer\n        else \n            MaterialTheme.colorScheme.errorContainer\n    ) {\n        Row(\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Icon(\n                imageVector = if (isConnected) Icons.Default.CloudDone else Icons.Default.CloudOff,\n                contentDescription = null,\n                tint = if (isConnected)\n                    MaterialTheme.colorScheme.onPrimaryContainer\n                else\n                    MaterialTheme.colorScheme.onErrorContainer\n            )\n            Spacer(modifier = Modifier.width(8.dp))\n            Text(\n                text = if (isConnected) "Connected to Store" else "Not Connected",\n                style = MaterialTheme.typography.bodyMedium,\n                color = if (isConnected)\n                    MaterialTheme.colorScheme.onPrimaryContainer\n                else\n                    MaterialTheme.colorScheme.onErrorContainer\n            )\n        }\n    }\n}\n\n@Composable\nfun ErrorBanner(\n    message: String,\n    onDismiss: () -> Unit\n) {\n    Surface(\n        modifier = Modifier.fillMaxWidth(),\n        color = MaterialTheme.colorScheme.errorContainer\n    ) {\n        Row(\n            modifier = Modifier.padding(16.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Icon(\n                Icons.Default.Error,\n                contentDescription = null,\n                tint = MaterialTheme.colorScheme.onErrorContainer\n            )\n            Spacer(modifier = Modifier.width(8.dp))\n            Text(\n                text = message,\n                modifier = Modifier.weight(1f),\n                color = MaterialTheme.colorScheme.onErrorContainer\n            )\n            IconButton(onClick = onDismiss) {\n                Icon(\n                    Icons.Default.Close,\n                    contentDescription = "Dismiss",\n                    tint = MaterialTheme.colorScheme.onErrorContainer\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun PurchaseInfo(purchase: Purchase) {\n    Surface(\n        modifier = Modifier.fillMaxWidth(),\n        color = MaterialTheme.colorScheme.secondaryContainer\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Icon(\n                    Icons.Default.ShoppingCart,\n                    contentDescription = null,\n                    tint = MaterialTheme.colorScheme.onSecondaryContainer\n                )\n                Spacer(modifier = Modifier.width(8.dp))\n                Text(\n                    "Purchase Successful!",\n                    style = MaterialTheme.typography.titleMedium,\n                    color = MaterialTheme.colorScheme.onSecondaryContainer\n                )\n            }\n            Spacer(modifier = Modifier.height(4.dp))\n            Text(\n                "Product: ${purchase.productId}",\n                style = MaterialTheme.typography.bodySmall,\n                color = MaterialTheme.colorScheme.onSecondaryContainer\n            )\n            Text(\n                "Transaction: ${purchase.id}",\n                style = MaterialTheme.typography.bodySmall,\n                color = MaterialTheme.colorScheme.onSecondaryContainer\n            )\n        }\n    }\n}\n\n@Composable\nfun EmptyProducts(onReload: () -> Unit) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Store,\n            contentDescription = null,\n            modifier = Modifier.size(64.dp),\n            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            "No products available",\n            style = MaterialTheme.typography.titleMedium,\n            color = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n        Spacer(modifier = Modifier.height(8.dp))\n        Button(onClick = onReload) {\n            Text("Reload Products")\n        }\n    }\n}\n\n@Composable\nfun ProductsList(\n    products: List<Product>,\n    processingProductId: String?,\n    onPurchase: (String) -> Unit\n) {\n    LazyColumn(\n        contentPadding = PaddingValues(16.dp),\n        verticalArrangement = Arrangement.spacedBy(12.dp)\n    ) {\n        items(products) { product ->\n            ProductCard(\n                product = product,\n                isProcessing = product.id == processingProductId,\n                onPurchase = { onPurchase(product.id) }\n            )\n        }\n    }\n}\n\n@Composable\nfun ProductCard(\n    product: Product,\n    isProcessing: Boolean,\n    onPurchase: () -> Unit\n) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Row(verticalAlignment = Alignment.Top) {\n                Surface(\n                    modifier = Modifier.size(48.dp),\n                    shape = MaterialTheme.shapes.small,\n                    color = MaterialTheme.colorScheme.primaryContainer\n                ) {\n                    Box(contentAlignment = Alignment.Center) {\n                        Icon(\n                            imageVector = getProductIcon(product.id),\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.onPrimaryContainer\n                        )\n                    }\n                }\n                Spacer(modifier = Modifier.width(12.dp))\n                Column(modifier = Modifier.weight(1f)) {\n                    Text(\n                        text = product.title,\n                        style = MaterialTheme.typography.titleMedium\n                    )\n                    product.description?.let { desc ->\n                        Text(\n                            text = desc,\n                            style = MaterialTheme.typography.bodySmall,\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\n                        )\n                    }\n                }\n            }\n            \n            Spacer(modifier = Modifier.height(12.dp))\n            \n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = product.displayPrice,\n                    style = MaterialTheme.typography.headlineSmall,\n                    color = MaterialTheme.colorScheme.primary\n                )\n                \n                Button(\n                    onClick = onPurchase,\n                    enabled = !isProcessing\n                ) {\n                    if (isProcessing) {\n                        CircularProgressIndicator(\n                            modifier = Modifier.size(16.dp),\n                            color = MaterialTheme.colorScheme.onPrimary,\n                            strokeWidth = 2.dp\n                        )\n                    } else {\n                        Text("Buy Now")\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun getProductIcon(productId: String): ImageVector {\n    return when (productId) {\n        "coins_100", "coins_500" -> Icons.Default.MonetizationOn\n        "remove_ads" -> Icons.Default.Block\n        "premium_upgrade" -> Icons.Default.Star\n        else -> Icons.Default.ShoppingBag\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"key-features-explained",children:"Key Features Explained"}),"\n",(0,o.jsx)(n.h3,{id:"1-connection-management",children:"1. Connection Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"kmpIapInstance.initConnection()\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Initializes connection to App Store or Google Play using OpenIAP-compliant API"}),"\n",(0,o.jsx)(n.li,{children:"Must be called before any other IAP operations"}),"\n",(0,o.jsxs)(n.li,{children:["Connection state is monitored via ",(0,o.jsx)(n.code,{children:"isConnected"})," StateFlow"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-product-loading-openiap-compliant",children:"2. Product Loading (OpenIAP-Compliant)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"val products = kmpIapInstance.fetchProducts {\n    skus = productIds\n    type = ProductQueryType.InApp\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Fetches products implementing ",(0,o.jsx)(n.code,{children:"ProductCommon"})," interface"]}),"\n",(0,o.jsx)(n.li,{children:"Returns OpenIAP-compliant product objects with unified fields"}),"\n",(0,o.jsx)(n.li,{children:"Product IDs must be configured in store console"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-purchase-flow-openiap-compliant",children:"3. Purchase Flow (OpenIAP-Compliant)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"kmpIapInstance.requestPurchase {\n    ios {\n        sku = productId\n        quantity = 1\n        appAccountToken = getUserId()\n    }\n    android {\n        skus = listOf(productId)\n        obfuscatedAccountIdAndroid = getUserId()\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Uses OpenIAP-compliant ",(0,o.jsx)(n.code,{children:"RequestPurchaseProps"})," structure"]}),"\n",(0,o.jsx)(n.li,{children:"Platform-specific options in dedicated iOS/Android properties"}),"\n",(0,o.jsxs)(n.li,{children:["Purchase result comes through ",(0,o.jsx)(n.code,{children:"purchaseUpdatedListener"})," Flow"]}),"\n",(0,o.jsxs)(n.li,{children:["Errors are delivered via ",(0,o.jsx)(n.code,{children:"purchaseErrorListener"})," Flow"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-transaction-finishing",children:"4. Transaction Finishing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"val success = kmpIapInstance.finishTransaction(\n    purchase = purchase.toPurchaseInput(),\n    isConsumable = true // or false for non-consumables\n)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Essential for completing the purchase flow"}),"\n",(0,o.jsx)(n.li,{children:"Handles both iOS and Android transaction completion"}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"isConsumable"})," parameter determines transaction type"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,o.jsx)(n.p,{children:"The example demonstrates handling common error scenarios:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"User cancellation (don't show error)"}),"\n",(0,o.jsx)(n.li,{children:"Network errors (suggest retry)"}),"\n",(0,o.jsx)(n.li,{children:"Already owned items (suggest restore)"}),"\n",(0,o.jsx)(n.li,{children:"Generic errors (show user-friendly message)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"usage-instructions",children:"Usage Instructions"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Replace Product IDs"}),": Update ",(0,o.jsx)(n.code,{children:"productIds"})," with your actual product IDs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configure Stores"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"iOS: Add products to App Store Connect"}),"\n",(0,o.jsx)(n.li,{children:"Android: Add products to Google Play Console"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Implement Server Verification"}),": Replace ",(0,o.jsx)(n.code,{children:"verifyPurchase"})," with real server validation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Customize Product Delivery"}),": Update ",(0,o.jsx)(n.code,{children:"deliverProduct"})," with your business logic"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Style the UI"}),": Customize the Compose UI to match your app's design"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,o.jsx)(n.h3,{id:"product-types",children:"Product Types"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'// For different product types\nenum class ProductType { CONSUMABLE, NON_CONSUMABLE, SUBSCRIPTION }\n\nfun isConsumableProduct(productId: String): Boolean {\n    // Your logic to determine consumable products\n    return listOf("coins_100", "coins_500").contains(productId)\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-error-handling",children:"Custom Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun handlePurchaseError(error: PurchaseError) {\n    when (error.code) {\n        ErrorCode.UserCancelled -> { /* Silent */ }\n        ErrorCode.NetworkError -> { /* Show retry */ }\n        ErrorCode.AlreadyOwned -> { /* Suggest restore */ }\n        // Add your custom error handling\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"loading-states",children:"Loading States"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"// Add loading indicators for better UX\ndata class LoadingState(\n    val isLoading: Boolean = false,\n    val loadingMessage: String? = null\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Learn Subscriptions"}),": Check out the ",(0,o.jsx)(n.a,{href:"/kmp-iap/docs/examples/subscription-store",children:"Subscription Store Example"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Advanced Features"}),": See the ",(0,o.jsx)(n.a,{href:"/kmp-iap/docs/examples/complete-implementation",children:"Complete Implementation"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Read the ",(0,o.jsx)(n.a,{href:"/kmp-iap/docs/api/error-codes",children:"Error Codes Reference"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Platform Setup"}),": Review ",(0,o.jsx)(n.a,{href:"/kmp-iap/docs/getting-started/ios-setup",children:"iOS Setup"})," and ",(0,o.jsx)(n.a,{href:"/kmp-iap/docs/getting-started/android-setup",children:"Android Setup"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(6540);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);