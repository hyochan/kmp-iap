"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[4495],{7992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(4848),i=t(8453);const o={sidebar_position:8,title:"Offer Code Redemption"},s="Offer Code Redemption",a={id:"guides/offer-code-redemption",title:"Offer Code Redemption",description:"Guide to implementing promotional offer codes and subscription management with kmp-iap v1.0.0-beta.2, covering iOS and Android platforms.",source:"@site/versioned_docs/version-1.0.0-beta/guides/offer-code-redemption.md",sourceDirName:"guides",slug:"/guides/offer-code-redemption",permalink:"/kmp-iap/docs/1.0.0-beta/guides/offer-code-redemption",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/versioned_docs/version-1.0.0-beta/guides/offer-code-redemption.md",tags:[],version:"1.0.0-beta",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Offer Code Redemption"},sidebar:"docsSidebar",previous:{title:"Lifecycle",permalink:"/kmp-iap/docs/1.0.0-beta/guides/lifecycle"},next:{title:"Troubleshooting",permalink:"/kmp-iap/docs/1.0.0-beta/guides/troubleshooting"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"iOS Offer Code Redemption",id:"ios-offer-code-redemption",level:2},{value:"Present Code Redemption Sheet",id:"present-code-redemption-sheet",level:3},{value:"Storefront Information",id:"storefront-information",level:3},{value:"Subscription Management",id:"subscription-management",level:2},{value:"iOS Subscription Management",id:"ios-subscription-management",level:3},{value:"Android Subscription Management",id:"android-subscription-management",level:2},{value:"Deep Linking to Subscriptions",id:"deep-linking-to-subscriptions",level:3},{value:"Complete Implementation Example",id:"complete-implementation-example",level:2},{value:"Cross-Platform Offer Handler",id:"cross-platform-offer-handler",level:3},{value:"Additional Features",id:"additional-features",level:2},{value:"Platform-Specific Helpers",id:"platform-specific-helpers",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"In a Compose UI",id:"in-a-compose-ui",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"offer-code-redemption",children:"Offer Code Redemption"}),"\n",(0,r.jsx)(n.p,{children:"Guide to implementing promotional offer codes and subscription management with kmp-iap v1.0.0-beta.2, covering iOS and Android platforms."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This library provides native support for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Offer code redemption sheet and subscription management (iOS 14+)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Deep linking to subscription management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-platform"}),": StateFlow-based state management for offers and subscriptions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ios-offer-code-redemption",children:"iOS Offer Code Redemption"}),"\n",(0,r.jsx)(n.h3,{id:"present-code-redemption-sheet",children:"Present Code Redemption Sheet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'import kotlinx.coroutines.*\nimport io.github.hyochan.kmpiap.*\nimport io.github.hyochan.kmpiap.types.*\nimport io.github.hyochan.kmpiap.kmpIapInstance\n\nclass OfferCodeHandler(\n    private val scope: CoroutineScope\n) {\n    \n    /**\n     * Present iOS system offer code redemption sheet (iOS 14+)\n     */\n    suspend fun presentOfferCodeRedemption() {\n        if (getCurrentPlatform() != IapPlatform.IOS) {\n            println("Offer code redemption is only available on iOS")\n            return\n        }\n        \n        try {\n            // Present the system offer code redemption sheet\n            kmpIapInstance.presentCodeRedemptionSheet()\n            println("Offer code redemption sheet presented")\n            \n            // Results will come through purchaseUpdatedListener\n            listenForRedemptionResults()\n            \n        } catch (e: PurchaseError) {\n            println("Failed to present offer code sheet: $e")\n        }\n    }\n    \n    private fun listenForRedemptionResults() {\n        scope.launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                println("Offer code redeemed: ${purchase.productId}")\n                // Handle successful redemption\n                handleRedeemedPurchase(purchase)\n            }\n        }\n    }\n    \n    private suspend fun handleRedeemedPurchase(purchase: Purchase) {\n        // Process the redeemed purchase\n        // Verify receipt, deliver content, etc.\n        val success = kmpIapInstance.finishTransaction(\n            purchase = purchase,\n            isConsumable = false\n        )\n        \n        if (success) {\n            println("Redeemed purchase processed successfully")\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"storefront-information",children:"Storefront Information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class StorefrontHandler() {\n    /**\n     * Get App Store storefront information (iOS only)\n     */\n    suspend fun getStorefrontInfo(): Map<String, Any?>? {\n        if (getCurrentPlatform() != IapPlatform.IOS) return null\n        \n        return try {\n            val storefront = kmpIapInstance.getStorefront()\n            println("Storefront info: $storefront")\n            storefront\n        } catch (e: PurchaseError) {\n            println("Failed to get storefront info: $e")\n            null\n        }\n    }\n    \n    /**\n     * Get the current store type\n     */\n    fun getCurrentStore(): Store {\n        return kmpIapInstance.getStore()\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"subscription-management",children:"Subscription Management"}),"\n",(0,r.jsx)(n.h3,{id:"ios-subscription-management",children:"iOS Subscription Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class SubscriptionManager(\n    private val scope: CoroutineScope\n) {\n    \n    /**\n     * Show iOS subscription management screen (iOS 15+)\n     */\n    suspend fun showManageSubscriptions() {\n        if (getCurrentPlatform() != IapPlatform.IOS) {\n            println("Subscription management is only available on iOS")\n            return\n        }\n        \n        try {\n            kmpIapInstance.showManageSubscriptions()\n            println("Subscription management screen presented")\n        } catch (e: PurchaseError) {\n            println("Failed to show subscription management: $e")\n        }\n    }\n    \n    /**\n     * Monitor subscription state changes\n     */\n    suspend fun observeSubscriptions() {\n        val subscriptions = kmpIapInstance.requestSubscriptions(\n            ProductRequest(\n                skus = listOf("monthly_sub", "yearly_sub"),\n                type = ProductType.SUBS\n            )\n        )\n        println("Active subscriptions: ${subscriptions.size}")\n        subscriptions.forEach { sub ->\n            println("Subscription: ${sub.id}")\n            if (sub is SubscriptionProduct) {\n                println("Period: ${sub.subscriptionPeriod}")\n            }\n            println("Price: ${sub.price}")\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"android-subscription-management",children:"Android Subscription Management"}),"\n",(0,r.jsx)(n.h3,{id:"deep-linking-to-subscriptions",children:"Deep Linking to Subscriptions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class AndroidSubscriptionManager() {\n    /**\n     * Open Android subscription management (deep link to Play Store)\n     */\n    suspend fun openSubscriptionManagement(productId: String? = null) {\n        if (getCurrentPlatform() != IapPlatform.ANDROID) {\n            println("Android subscription management is only available on Android")\n            return\n        }\n        \n        try {\n            // Deep link to subscription management in Play Store\n            productId?.let {\n                kmpIapInstance.deepLinkToSubscriptions(it)\n            } ?: run {\n                // Open general subscription management\n                kmpIapInstance.deepLinkToSubscriptions("")\n            }\n            \n            println("Opened Android subscription management")\n        } catch (e: PurchaseError) {\n            println("Failed to open subscription management: $e")\n        }\n    }\n    \n    /**\n     * Get purchase history including subscriptions\n     */\n    suspend fun getSubscriptionHistory() {\n        if (getCurrentPlatform() != IapPlatform.ANDROID) return\n        \n        try {\n            val history = kmpIapInstance.getAvailablePurchases()\n            \n            val subscriptions = history.filter { \n                it.productId.contains("subscription") || \n                it.productId.contains("monthly") ||\n                it.productId.contains("yearly")\n            }\n            println("Found ${subscriptions.size} subscriptions in history")\n        } catch (e: PurchaseError) {\n            println("Failed to get subscription history: $e")\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-implementation-example",children:"Complete Implementation Example"}),"\n",(0,r.jsx)(n.h3,{id:"cross-platform-offer-handler",children:"Cross-Platform Offer Handler"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.*\n\nclass CrossPlatformOfferViewModel : ViewModel() {\n    \n    data class OfferState(\n        val isLoading: Boolean = false,\n        val canRedeemCode: Boolean = false,\n        val activeSubscriptions: List<Product> = emptyList(),\n        val promotedProducts: List<Product>? = null,\n        val error: String? = null\n    )\n    \n    private val _state = MutableStateFlow(OfferState())\n    val state: StateFlow<OfferState> = _state.asStateFlow()\n    \n    init {\n        initializeIAP()\n        observeStates()\n        checkPlatformCapabilities()\n    }\n    \n    private fun initializeIAP() {\n        viewModelScope.launch {\n            kmpIapInstance.initConnection()\n        }\n    }\n    \n    private fun observeStates() {\n        // Load subscriptions\n        viewModelScope.launch {\n            try {\n                val subs = kmpIapInstance.requestSubscriptions(\n                    ProductRequest(\n                        skus = listOf("monthly_sub", "yearly_sub"),\n                        type = ProductType.SUBS\n                    )\n                )\n                _state.update { it.copy(activeSubscriptions = subs) }\n            } catch (e: PurchaseError) {\n                _state.update { it.copy(error = e.message) }\n            }\n        }\n    }\n    \n    private fun checkPlatformCapabilities() {\n        val canRedeem = getCurrentPlatform() == IapPlatform.IOS\n        _state.update { it.copy(canRedeemCode = canRedeem) }\n    }\n    \n    /**\n     * Present offer code redemption (iOS) or subscription management (Android)\n     */\n    suspend fun handleOfferRedemption() {\n        _state.update { it.copy(isLoading = true, error = null) }\n        \n        try {\n            when (getCurrentPlatform()) {\n                IapPlatform.IOS -> {\n                    // iOS: Present code redemption sheet\n                    kmpIapInstance.presentCodeRedemptionSheet()\n                    println("iOS offer code redemption sheet presented")\n                    listenForPurchases()\n                }\n                IapPlatform.ANDROID -> {\n                    // Android: Open subscription management\n                    kmpIapInstance.deepLinkToSubscriptions("")\n                    println("Android subscription management opened")\n                }\n            }\n        } catch (e: PurchaseError) {\n            _state.update { \n                it.copy(\n                    isLoading = false,\n                    error = "Failed to handle offer redemption: ${e.message}"\n                )\n            }\n        }\n    }\n    \n    /**\n     * Show subscription management UI\n     */\n    suspend fun showSubscriptionManagement() {\n        try {\n            when (getCurrentPlatform()) {\n                IapPlatform.IOS -> {\n                    kmpIapInstance.showManageSubscriptions()\n                }\n                IapPlatform.ANDROID -> {\n                    // For Android, deep link to the first active subscription\n                    val firstSub = _state.value.activeSubscriptions.firstOrNull()\n                    firstSub?.let {\n                        kmpIapInstance.deepLinkToSubscriptions(it.id)\n                    }\n                }\n            }\n        } catch (e: PurchaseError) {\n            _state.update { \n                it.copy(error = "Failed to open subscription management: ${e.message}")\n            }\n        }\n    }\n    \n    private fun listenForPurchases() {\n        viewModelScope.launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                println("Purchase received: ${purchase.productId}")\n                handlePurchaseSuccess(purchase)\n            }\n        }\n    }\n    \n    private suspend fun handlePurchaseSuccess(purchase: Purchase) {\n        // Deliver content\n        deliverContent(purchase.productId)\n        \n        // Finish transaction\n        kmpIapInstance.finishTransaction(\n            purchase = purchase,\n            isConsumable = false\n        )\n        \n        _state.update { it.copy(isLoading = false) }\n    }\n    \n    override fun onCleared() {\n        super.onCleared()\n        kmpIapInstance.dispose()\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"additional-features",children:"Additional Features"}),"\n",(0,r.jsx)(n.h3,{id:"platform-specific-helpers",children:"Platform-Specific Helpers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class PlatformSpecificFeatures(\n    private val scope: CoroutineScope\n) {\n    /**\n     * iOS: Get promoted products from App Store\n     */\n    suspend fun getPromotedProducts(): List<Product> {\n        if (getCurrentPlatform() != IapPlatform.IOS) return emptyList()\n        \n        return try {\n            // Load promoted products\n            val products = kmpIapInstance.requestProducts(\n                ProductRequest(\n                    skus = listOf("promoted_product_1", "promoted_product_2"),\n                    type = ProductType.INAPP\n                )\n            )\n            products.forEach { product ->\n                println("Promoted product: ${product.id}")\n                println("Price: ${product.price}")\n            }\n            products\n        } catch (e: PurchaseError) {\n            println("Failed to get promoted products: $e")\n            emptyList()\n        }\n    }\n    \n    /**\n     * Android: Handle subscription with specific offer\n     */\n    suspend fun purchaseSubscriptionWithOffer(\n        productId: String,\n        offerToken: String\n    ) {\n        if (getCurrentPlatform() != IapPlatform.ANDROID) return\n        \n        try {\n            kmpIapInstance.requestSubscription(\n                SubscriptionRequest(\n                    sku = productId,\n                    offerToken = offerToken\n                )\n            )\n        } catch (e: PurchaseError) {\n            println("Failed to purchase with offer: $e")\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"in-a-compose-ui",children:"In a Compose UI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'import androidx.compose.runtime.*\nimport androidx.compose.material3.*\nimport androidx.compose.foundation.layout.*\n\n@Composable\nfun OfferRedemptionScreen(\n    viewModel: CrossPlatformOfferViewModel = viewModel()\n) {\n    val state by viewModel.state.collectAsState()\n    val scope = rememberCoroutineScope()\n    \n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text("Redeem Offers") }\n            )\n        }\n    ) { paddingValues ->\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues),\n            contentAlignment = Alignment.Center\n        ) {\n            when {\n                state.isLoading -> {\n                    CircularProgressIndicator()\n                }\n                \n                state.error != null -> {\n                    ErrorMessage(\n                        message = state.error,\n                        onRetry = {\n                            scope.launch {\n                                viewModel.handleOfferRedemption()\n                            }\n                        }\n                    )\n                }\n                \n                else -> {\n                    Column(\n                        horizontalAlignment = Alignment.CenterHorizontally,\n                        verticalArrangement = Arrangement.spacedBy(16.dp)\n                    ) {\n                        when (getCurrentPlatform()) {\n                            IapPlatform.IOS -> {\n                                Button(\n                                    onClick = {\n                                        scope.launch {\n                                            viewModel.handleOfferRedemption()\n                                        }\n                                    }\n                                ) {\n                                    Text("Redeem Offer Code")\n                                }\n                                \n                                if (state.promotedProducts?.isNotEmpty() == true) {\n                                    Text(\n                                        "Promoted products available!",\n                                        style = MaterialTheme.typography.bodySmall\n                                    )\n                                }\n                            }\n                            \n                            IapPlatform.ANDROID -> {\n                                Button(\n                                    onClick = {\n                                        scope.launch {\n                                            viewModel.handleOfferRedemption()\n                                        }\n                                    }\n                                ) {\n                                    Text("Manage Subscriptions")\n                                }\n                            }\n                        }\n                        \n                        if (state.activeSubscriptions.isNotEmpty()) {\n                            Button(\n                                onClick = {\n                                    scope.launch {\n                                        viewModel.showSubscriptionManagement()\n                                    }\n                                }\n                            ) {\n                                Text("View Active Subscriptions")\n                            }\n                            \n                            Text(\n                                "Active: ${state.activeSubscriptions.size} subscriptions",\n                                style = MaterialTheme.typography.bodySmall\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Full support for offer code redemption through system sheet (iOS 14+)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": No direct promo code API - users must redeem through Play Store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Subscription Management"}),": Both platforms support opening native subscription management"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Minimum iOS 14.0 for offer code redemption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Minimum iOS 15.0 for subscription management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Requires Google Play Billing Library 7.x+"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Always check platform before calling platform-specific methods"}),"\n",(0,r.jsx)(n.li,{children:"Handle errors gracefully as native dialogs may fail"}),"\n",(0,r.jsx)(n.li,{children:"Monitor purchase StateFlow when presenting offer code redemption"}),"\n",(0,r.jsx)(n.li,{children:"Use subscription management for user convenience"}),"\n",(0,r.jsx)(n.li,{children:"Validate redeemed purchases server-side"}),"\n",(0,r.jsx)(n.li,{children:"Clear purchase state after processing"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'private fun handleOfferError(error: PurchaseError) {\n    when (error.code) {\n        ErrorCode.FEATURE_NOT_SUPPORTED -> {\n            // Feature not available on this OS version\n            showMessage("This feature requires a newer OS version")\n        }\n        ErrorCode.SERVICE_DISCONNECTED -> {\n            // Store connection lost\n            showMessage("Please check your connection and try again")\n        }\n        else -> {\n            // Generic error\n            showMessage("Failed to process offer: ${error.message}")\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use sandbox tester accounts"}),"\n",(0,r.jsx)(n.li,{children:"Configure offer codes in App Store Connect"}),"\n",(0,r.jsx)(n.li,{children:"Test on iOS 14+ devices"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use test subscriptions in Google Play Console"}),"\n",(0,r.jsx)(n.li,{children:"Configure subscription offers"}),"\n",(0,r.jsx)(n.li,{children:"Test deep linking functionality"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);