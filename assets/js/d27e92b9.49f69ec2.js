"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[363],{533:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var l=i(4848),t=i(8453);const r={title:"Alternative Billing Example",sidebar_label:"Alternative Billing",sidebar_position:4},o="Alternative Billing",a={id:"examples/alternative-billing",title:"Alternative Billing Example",description:"Use alternative billing to redirect users to external payment systems or offer payment choices alongside platform billing.",source:"@site/docs/examples/alternative-billing.md",sourceDirName:"examples",slug:"/examples/alternative-billing",permalink:"/kmp-iap/docs/examples/alternative-billing",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/docs/examples/alternative-billing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Alternative Billing Example",sidebar_label:"Alternative Billing",sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Complete Implementation",permalink:"/kmp-iap/docs/examples/complete-implementation"}},s={},c=[{value:"iOS - External Purchase URL",id:"ios---external-purchase-url",level:2},{value:"Important Notes",id:"important-notes",level:3},{value:"Android - Alternative Billing Only",id:"android---alternative-billing-only",level:2},{value:"Flow Steps",id:"flow-steps",level:3},{value:"Android - User Choice Billing",id:"android---user-choice-billing",level:2},{value:"Selection Dialog",id:"selection-dialog",level:3},{value:"Complete Cross-Platform Example",id:"complete-cross-platform-example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Initialize with Alternative Billing Mode",id:"initialize-with-alternative-billing-mode",level:3},{value:"iOS Configuration (Info.plist)",id:"ios-configuration-infoplist",level:3},{value:"iOS Entitlements",id:"ios-entitlements",level:3},{value:"Event Listeners",id:"event-listeners",level:2},{value:"Purchase Updates (Google Play)",id:"purchase-updates-google-play",level:3},{value:"User Choice Billing (Android)",id:"user-choice-billing-android",level:3},{value:"Purchase Errors",id:"purchase-errors",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Check if Alternative Billing is Available",id:"check-if-alternative-billing-is-available",level:3},{value:"Handle Alternative Billing Purchase Result",id:"handle-alternative-billing-purchase-result",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"iOS: External URL not opening",id:"ios-external-url-not-opening",level:3},{value:"Android: Alternative billing not available",id:"android-alternative-billing-not-available",level:3},{value:"Android: Token creation failed",id:"android-token-creation-failed",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"alternative-billing",children:"Alternative Billing"}),"\n",(0,l.jsx)(n.p,{children:"Use alternative billing to redirect users to external payment systems or offer payment choices alongside platform billing."}),"\n",(0,l.jsx)(n.p,{children:"View the full example source:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["GitHub: ",(0,l.jsx)(n.a,{href:"https://github.com/hyochan/kmp-iap/blob/main/example/composeApp/src/commonMain/kotlin/dev/hyo/martie/screens/AlternativeBillingScreen.kt",children:"AlternativeBillingScreen.kt"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"ios---external-purchase-url",children:"iOS - External Purchase URL"}),"\n",(0,l.jsx)(n.p,{children:"Redirect users to an external website for payment (iOS 16.0+):"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.openiap.ProductCommon\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport kotlinx.coroutines.launch\n\n@Composable\nfun IOSAlternativeBilling(product: ProductCommon) {\n    val scope = rememberCoroutineScope()\n\n    Button(\n        onClick = {\n            scope.launch {\n                try {\n                    val result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n                        url = "https://your-site.com/checkout?product=${product.id}"\n                    )\n\n                    if (result.success) {\n                        // User was redirected to external website\n                        println("Redirected to external checkout")\n                    } else {\n                        println("Error: ${result.error}")\n                    }\n                } catch (e: Exception) {\n                    println("Failed to present external link: ${e.message}")\n                }\n            }\n        }\n    ) {\n        Text("Buy (External URL)")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS 16.0+ Required"}),": External URLs only work on iOS 16.0 and later"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Configuration Required"}),": External URLs must be configured in Info.plist (see ",(0,l.jsx)(n.a,{href:"/kmp-iap/docs/guides/alternative-billing",children:"Alternative Billing Guide"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No Callback"}),": ",(0,l.jsx)(n.code,{children:"purchaseUpdatedListener"})," will NOT fire when using external URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Linking"}),": Implement deep linking to return users to your app"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"android---alternative-billing-only",children:"Android - Alternative Billing Only"}),"\n",(0,l.jsx)(n.p,{children:"Manual 3-step flow for alternative billing only:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.openiap.ProductCommon\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport kotlinx.coroutines.launch\n\n@Composable\nfun AndroidAlternativeBillingOnly(product: ProductCommon) {\n    val scope = rememberCoroutineScope()\n\n    Button(\n        onClick = {\n            scope.launch {\n                try {\n                    // Step 1: Check availability\n                    val isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n                    if (!isAvailable) {\n                        println("Alternative billing not available")\n                        return@launch\n                    }\n\n                    // Step 2: Show information dialog\n                    val userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\n                    if (!userAccepted) {\n                        println("User declined")\n                        return@launch\n                    }\n\n                    // Step 2.5: Process payment with your payment system\n                    // ... your payment processing logic here ...\n                    println("Processing payment...")\n\n                    // Step 3: Create reporting token (after successful payment)\n                    val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n                    println("Token created: $token")\n\n                    // Step 4: Report token to Google Play backend within 24 hours\n                    // reportToGoogleBackend(token)\n\n                    println("Alternative billing completed")\n                } catch (e: Exception) {\n                    println("Error: ${e.message}")\n                }\n            }\n        }\n    ) {\n        Text("Buy (Alternative Only)")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"flow-steps",children:"Flow Steps"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Check availability"})," - Verify alternative billing is enabled"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Show info dialog"})," - Display Google's information dialog"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Process payment"})," - Handle payment with your system"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Create token"})," - Generate reporting token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Report to Google"})," - Send token to Google within 24 hours"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"android---user-choice-billing",children:"Android - User Choice Billing"}),"\n",(0,l.jsx)(n.p,{children:"Let users choose between Google Play and alternative billing:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.requestPurchase\nimport io.github.hyochan.kmpiap.openiap.*\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.rememberCoroutineScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.collect\n\n@Composable\nfun AndroidUserChoiceBilling(product: ProductCommon) {\n    val scope = rememberCoroutineScope()\n    // Initialize with user choice mode\n    LaunchedEffect(Unit) {\n        val config = InitConnectionConfig(\n            alternativeBillingModeAndroid = AlternativeBillingModeAndroid.UserChoice\n        )\n        kmpIapInstance.initConnection(config)\n\n        // Listen for user choice events\n        kmpIapInstance.userChoiceBillingListener.collect { details ->\n            println("User selected alternative billing")\n            println("Products: ${details.products}")\n            // Handle alternative billing flow\n        }\n    }\n\n    // Listen for Google Play purchases\n    LaunchedEffect(Unit) {\n        kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n            // Fires if user selects Google Play\n            println("Google Play purchase: ${purchase.productId}")\n        }\n    }\n\n    Button(\n        onClick = {\n            scope.launch {\n                try {\n                    // Google will show selection dialog automatically\n                    kmpIapInstance.requestPurchase {\n                        android {\n                            skus = listOf(product.id)\n                        }\n                    }\n                    // If user selects Google Play: purchaseUpdatedListener fires\n                    // If user selects alternative: userChoiceBillingListener fires\n                } catch (e: Exception) {\n                    println("Purchase error: ${e.message}")\n                }\n            }\n        }\n    ) {\n        Text("Buy (User Choice)")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"selection-dialog",children:"Selection Dialog"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Google shows automatic selection dialog"}),"\n",(0,l.jsx)(n.li,{children:"User chooses: Google Play (30% fee) or Alternative (lower fee)"}),"\n",(0,l.jsx)(n.li,{children:"Different callbacks based on user choice"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"complete-cross-platform-example",children:"Complete Cross-Platform Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.requestPurchase\nimport io.github.hyochan.kmpiap.fetchProducts\nimport io.github.hyochan.kmpiap.openiap.*\nimport kotlinx.coroutines.launch\n\n@Composable\nfun AlternativeBillingScreen() {\n    val scope = rememberCoroutineScope()\n    var billingMode by remember {\n        mutableStateOf(AlternativeBillingModeAndroid.AlternativeOnly)\n    }\n    var products by remember { mutableStateOf<List<ProductCommon>>(emptyList()) }\n    var connected by remember { mutableStateOf(false) }\n    var externalUrl by remember { mutableStateOf("https://your-site.com") }\n\n    // Initialize connection\n    LaunchedEffect(billingMode) {\n        val config = if (getPlatformName() == "Android") {\n            InitConnectionConfig(alternativeBillingModeAndroid = billingMode)\n        } else null\n\n        connected = kmpIapInstance.initConnection(config)\n\n        if (connected) {\n            products = kmpIapInstance.fetchProducts {\n                skus = listOf("premium_upgrade", "coins_100")\n                type = ProductQueryType.InApp\n            }\n        }\n    }\n\n    // Listen for purchase events\n    LaunchedEffect(Unit) {\n        launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                println("Purchase successful: ${purchase.productId}")\n            }\n        }\n\n        launch {\n            kmpIapInstance.purchaseErrorListener.collect { error ->\n                println("Purchase error: ${error.message}")\n            }\n        }\n\n        // Android user choice listener\n        if (getPlatformName() == "Android") {\n            launch {\n                kmpIapInstance.userChoiceBillingListener.collect { details ->\n                    println("User chose alternative billing: ${details.products}")\n                }\n            }\n        }\n    }\n\n    // Platform-specific purchase handlers\n    fun handleIOSPurchase(product: ProductCommon) {\n        scope.launch {\n            val result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n                url = "$externalUrl?product=${product.id}"\n            )\n            if (result.success) {\n                println("Redirected to external checkout")\n            } else {\n                println("Error: ${result.error}")\n            }\n        }\n    }\n\n    fun handleAndroidAlternativeOnly(product: ProductCommon) {\n        scope.launch {\n            val isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n            if (!isAvailable) {\n                println("Alternative billing not available")\n                return@launch\n            }\n\n            val userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\n            if (!userAccepted) return@launch\n\n            // Process payment...\n            val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n            println("Token created: ${token?.substring(0, 20)}...")\n        }\n    }\n\n    fun handleAndroidUserChoice(product: ProductCommon) {\n        scope.launch {\n            try {\n                kmpIapInstance.requestPurchase {\n                    android {\n                        skus = listOf(product.id)\n                    }\n                }\n            } catch (e: Exception) {\n                println("Error: ${e.message}")\n            }\n        }\n    }\n\n    fun handlePurchase(product: ProductCommon) {\n        when (getPlatformName()) {\n            "iOS" -> handleIOSPurchase(product)\n            "Android" -> {\n                when (billingMode) {\n                    AlternativeBillingModeAndroid.AlternativeOnly -> {\n                        handleAndroidAlternativeOnly(product)\n                    }\n                    AlternativeBillingModeAndroid.UserChoice -> {\n                        handleAndroidUserChoice(product)\n                    }\n                    else -> println("Alternative billing not configured")\n                }\n            }\n        }\n    }\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp)\n    ) {\n        Text("Alternative Billing Demo", style = MaterialTheme.typography.headlineMedium)\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // Platform indicator\n        Text("Platform: ${getPlatformName()}")\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // Android: Mode selector\n        if (getPlatformName() == "Android") {\n            Text("Billing Mode:", style = MaterialTheme.typography.titleMedium)\n            Row {\n                Button(\n                    onClick = {\n                        billingMode = AlternativeBillingModeAndroid.AlternativeOnly\n                    }\n                ) {\n                    Text("Alternative Only")\n                }\n                Spacer(modifier = Modifier.width(8.dp))\n                Button(\n                    onClick = {\n                        billingMode = AlternativeBillingModeAndroid.UserChoice\n                    }\n                ) {\n                    Text("User Choice")\n                }\n            }\n            Text("Current: $billingMode", style = MaterialTheme.typography.bodySmall)\n\n            Spacer(modifier = Modifier.height(16.dp))\n        }\n\n        // iOS: External URL input\n        if (getPlatformName() == "iOS") {\n            OutlinedTextField(\n                value = externalUrl,\n                onValueChange = { externalUrl = it },\n                label = { Text("External URL") },\n                modifier = Modifier.fillMaxWidth()\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n        }\n\n        // Connection status\n        Text(\n            text = if (connected) "\u2713 Connected" else "Not connected",\n            color = if (connected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // Products list\n        Text("Products:", style = MaterialTheme.typography.titleMedium)\n\n        products.forEach { product ->\n            Card(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(vertical = 8.dp)\n            ) {\n                Column(modifier = Modifier.padding(16.dp)) {\n                    Text(product.title, style = MaterialTheme.typography.titleSmall)\n                    Text(product.description, style = MaterialTheme.typography.bodySmall)\n                    Text(product.displayPrice, style = MaterialTheme.typography.bodyLarge)\n\n                    Spacer(modifier = Modifier.height(8.dp))\n\n                    Button(\n                        onClick = { handlePurchase(product) },\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text("Purchase")\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Platform detection helper\nexpect fun getPlatformName(): String\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Platform-specific implementations:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'// androidMain/AlternativeBillingScreen.android.kt\nactual fun getPlatformName(): String = "Android"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'// iosMain/AlternativeBillingScreen.ios.kt\nactual fun getPlatformName(): String = "iOS"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsx)(n.h3,{id:"initialize-with-alternative-billing-mode",children:"Initialize with Alternative Billing Mode"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.openiap.AlternativeBillingModeAndroid\nimport io.github.hyochan.kmpiap.openiap.InitConnectionConfig\n\n// Android with alternative billing\nval config = InitConnectionConfig(\n    alternativeBillingModeAndroid = AlternativeBillingModeAndroid.AlternativeOnly\n    // Or: AlternativeBillingModeAndroid.UserChoice\n    // Or: AlternativeBillingModeAndroid.None (default)\n)\n\nval connected = kmpIapInstance.initConnection(config)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ios-configuration-infoplist",children:"iOS Configuration (Info.plist)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    \x3c!-- Countries where external purchases are supported --\x3e\n    <key>SKExternalPurchase</key>\n    <array>\n        <string>kr</string>\n        <string>nl</string>\n        <string>de</string>\n    </array>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"ios-entitlements",children:"iOS Entitlements"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    <key>com.apple.developer.storekit.external-purchase</key>\n    <true/>\n\n    <key>com.apple.developer.storekit.external-purchase-link</key>\n    <true/>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsx)(n.h2,{id:"event-listeners",children:"Event Listeners"}),"\n",(0,l.jsx)(n.h3,{id:"purchase-updates-google-play",children:"Purchase Updates (Google Play)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'LaunchedEffect(Unit) {\n    kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n        println("Purchase successful: ${purchase.productId}")\n\n        // Deliver content\n        deliverContent(purchase.productId)\n\n        // Finish transaction\n        kmpIapInstance.finishTransaction(\n            purchase = purchase.toPurchaseInput(),\n            isConsumable = true\n        )\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"user-choice-billing-android",children:"User Choice Billing (Android)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'LaunchedEffect(Unit) {\n    kmpIapInstance.userChoiceBillingListener.collect { details ->\n        println("User selected alternative billing")\n        println("Products: ${details.products}")\n\n        // Process payment with your system\n        processAlternativePayment(details.products)\n\n        // Create and report token\n        val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n        if (token != null) {\n            reportToGoogleBackend(token)\n        }\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"purchase-errors",children:"Purchase Errors"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'LaunchedEffect(Unit) {\n    kmpIapInstance.purchaseErrorListener.collect { error ->\n        when (error.code) {\n            "user_cancelled" -> println("User cancelled")\n            else -> println("Error: ${error.message}")\n        }\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Test on iOS 16.0+ devices"}),"\n",(0,l.jsx)(n.li,{children:"Verify external URL opens in Safari"}),"\n",(0,l.jsx)(n.li,{children:"Test deep link return flow"}),"\n",(0,l.jsx)(n.li,{children:"Check entitlements are properly configured"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Configure alternative billing in Google Play Console"}),"\n",(0,l.jsx)(n.li,{children:"Test both modes separately (Alternative Only & User Choice)"}),"\n",(0,l.jsx)(n.li,{children:"Verify token generation"}),"\n",(0,l.jsx)(n.li,{children:"Test user choice dialog behavior"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Validation"})," - Always validate purchases on your server"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Clear UI"})," - Show users they're leaving the app (iOS)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Error Handling"})," - Handle all error cases gracefully"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Token Reporting"})," - Report within 24 hours (Android)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Linking"})," - Essential for iOS return flow"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Mode Selection"})," - Choose appropriate mode for your use case (Android)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,l.jsx)(n.h3,{id:"check-if-alternative-billing-is-available",children:"Check if Alternative Billing is Available"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'suspend fun isAlternativeBillingSupported(): Boolean {\n    return when (getPlatformName()) {\n        "iOS" -> {\n            // NOTE: This is a placeholder. A real implementation should check the OS version (iOS 16.0+).\n            // You can use Platform.osVersion or similar APIs to check the iOS version.\n            true\n        }\n        "Android" -> {\n            kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n        }\n        else -> false\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"handle-alternative-billing-purchase-result",children:"Handle Alternative Billing Purchase Result"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'data class AlternativeBillingResult(\n    val success: Boolean,\n    val token: String?,\n    val error: String?\n)\n\nsuspend fun handleAlternativeBillingPurchase(\n    product: ProductCommon\n): AlternativeBillingResult {\n    return when (getPlatformName()) {\n        "iOS" -> {\n            val result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n                url = "https://your-site.com/checkout?product=${product.id}"\n            )\n            AlternativeBillingResult(\n                success = result.success,\n                token = null,\n                error = result.error\n            )\n        }\n        "Android" -> {\n            val isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n            if (!isAvailable) {\n                return AlternativeBillingResult(\n                    success = false,\n                    token = null,\n                    error = "Alternative billing not available"\n                )\n            }\n\n            val userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\n            if (!userAccepted) {\n                return AlternativeBillingResult(\n                    success = false,\n                    token = null,\n                    error = "User declined"\n                )\n            }\n\n            // Process payment...\n            val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n            AlternativeBillingResult(\n                success = token != null,\n                token = token,\n                error = if (token == null) "Failed to create token" else null\n            )\n        }\n        else -> AlternativeBillingResult(\n            success = false,\n            token = null,\n            error = "Platform not supported"\n        )\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"ios-external-url-not-opening",children:"iOS: External URL not opening"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify iOS 16.0 or later"}),"\n",(0,l.jsx)(n.li,{children:"Check entitlements are approved"}),"\n",(0,l.jsx)(n.li,{children:"Ensure URLs are configured in Info.plist"}),"\n",(0,l.jsx)(n.li,{children:"Verify URL format (must be valid HTTPS)"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-alternative-billing-not-available",children:"Android: Alternative billing not available"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify Google Play approval"}),"\n",(0,l.jsx)(n.li,{children:"Check device and Play Store version"}),"\n",(0,l.jsx)(n.li,{children:"Ensure billing mode is configured"}),"\n",(0,l.jsx)(n.li,{children:"Check Google Play Console settings"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-token-creation-failed",children:"Android: Token creation failed"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify billing mode configuration"}),"\n",(0,l.jsx)(n.li,{children:"Ensure user completed info dialog"}),"\n",(0,l.jsx)(n.li,{children:"Check Google Play Console settings"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/guides/alternative-billing",children:"Alternative Billing Guide"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/api/core-methods#ios-specific-alternative-billing",children:"Core Methods - Alternative Billing APIs"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/examples/basic-store",children:"Purchase Flow Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/guides/troubleshooting",children:"Error Handling"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var l=i(6540);const t={},r=l.createContext(t);function o(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);