"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[6544],{9316:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"1.0.0-rc.4","metadata":{"permalink":"/kmp-iap/blog/1.0.0-rc.4","editUrl":"https://github.com/hyochan/kmp-iap/tree/main/docs/blog/2025-10-20-rc4-openiap-conversion.md","source":"@site/blog/2025-10-20-rc4-openiap-conversion.md","title":"1.0.0-rc.4 - OpenIAP Monorepo Conversion & Alternative Billing","description":"KMP-IAP 1.0.0-rc.4 marks a major milestone with the OpenIAP monorepo conversion and introduces Alternative Billing support for both iOS and Android platforms.","date":"2025-10-20T00:00:00.000Z","formattedDate":"October 20, 2025","tags":[{"label":"release","permalink":"/kmp-iap/blog/tags/release"},{"label":"openiap","permalink":"/kmp-iap/blog/tags/openiap"},{"label":"alternative-billing","permalink":"/kmp-iap/blog/tags/alternative-billing"},{"label":"monorepo","permalink":"/kmp-iap/blog/tags/monorepo"},{"label":"ios","permalink":"/kmp-iap/blog/tags/ios"},{"label":"android","permalink":"/kmp-iap/blog/tags/android"},{"label":"storekit","permalink":"/kmp-iap/blog/tags/storekit"},{"label":"kotlin-multiplatform","permalink":"/kmp-iap/blog/tags/kotlin-multiplatform"}],"readingTime":5.205,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of kmp-iap","url":"https://github.com/hyochan","imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"1.0.0-rc.4","title":"1.0.0-rc.4 - OpenIAP Monorepo Conversion & Alternative Billing","authors":["hyochan"],"tags":["release","openiap","alternative-billing","monorepo","ios","android","storekit","kotlin-multiplatform"],"date":"2025-10-20T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"v1.0.0-rc - Simplified API Design","permalink":"/kmp-iap/blog/2025/08/20/rc1-simplified-api"}},"content":"KMP-IAP 1.0.0-rc.4 marks a major milestone with the **OpenIAP monorepo conversion** and introduces **Alternative Billing** support for both iOS and Android platforms.\\n\\n\ud83d\udc49 [View the 1.0.0-rc.4 release](https://github.com/hyochan/kmp-iap/releases/tag/1.0.0-rc.4)\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udfaf Major Changes\\n\\n### OpenIAP Monorepo Conversion\\n\\nKMP-IAP now fully integrates with the **[OpenIAP monorepo](https://github.com/hyodotdev/openiap)**, centralizing all in-app purchase implementations under one standardized specification. This conversion brings:\\n\\n- **Unified dependency management** through `openiap-versions.json`\\n- **100% OpenIAP specification compliance** across all platforms\\n- **Centralized version control** for iOS, Android, and GraphQL types\\n- **Simplified maintenance** with single source of truth\\n\\n**Current OpenIAP versions:**\\n- **openiap-apple**: 1.2.26 (iOS StoreKit wrapper with external purchase support)\\n- **openiap-google**: 1.3.2 (Android BillingClient wrapper with alternative billing)\\n- **openiap-gql**: 1.2.2 (GraphQL type definitions)\\n\\nAll native SDKs are now maintained in the OpenIAP monorepo, ensuring consistent APIs and behavior across platforms.\\n\\n## \ud83d\ude80 New Features\\n\\n### iOS Alternative Billing (StoreKit External Purchase)\\n\\nThree new APIs for managing external purchases on iOS:\\n\\n- **[`canPresentExternalPurchaseNoticeIOS()`](/docs/api/core-methods#canpresentexternalpurchasenoticeios)** - Check if the notice sheet is available (iOS 18.2+)\\n- **[`presentExternalPurchaseNoticeSheetIOS()`](/docs/api/core-methods#presentexternalpurchasenoticesheetios)** - Present a notice before redirecting to external purchase (iOS 18.2+)\\n- **[`presentExternalPurchaseLinkIOS(url)`](/docs/api/core-methods#presentexternalpurchaselinkios)** - Open external purchase link in Safari (iOS 16.0+)\\n\\n**iOS Configuration Required:**\\n\\n**Info.plist:**\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">\\n<plist version=\\"1.0\\">\\n<dict>\\n    \x3c!-- Countries where external purchases are supported --\x3e\\n    <key>SKExternalPurchase</key>\\n    <array>\\n        <string>kr</string>\\n        <string>nl</string>\\n        <string>de</string>\\n    </array>\\n</dict>\\n</plist>\\n```\\n\\n**Entitlements (iosApp.entitlements):**\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">\\n<plist version=\\"1.0\\">\\n<dict>\\n    <key>com.apple.developer.storekit.external-purchase</key>\\n    <true/>\\n\\n    <key>com.apple.developer.storekit.external-purchase-link</key>\\n    <true/>\\n</dict>\\n</plist>\\n```\\n\\n**Usage Example:**\\n```kotlin\\nimport io.github.hyochan.kmpiap.kmpIapInstance\\n\\n// Redirect user to external purchase website\\nval result = kmpIapInstance.presentExternalPurchaseLinkIOS(\\n    url = \\"https://your-site.com/checkout\\"\\n)\\n\\nif (result.success) {\\n    println(\\"User redirected to external website\\")\\n} else {\\n    println(\\"Error: ${result.error}\\")\\n}\\n```\\n\\n### Android Alternative Billing\\n\\nThree new APIs for Google Play Alternative Billing flow:\\n\\n- **[`checkAlternativeBillingAvailabilityAndroid()`](/docs/api/core-methods#checkalternativebillingavailabilityandroid)** - Check if alternative billing is available for the user\\n- **[`showAlternativeBillingDialogAndroid()`](/docs/api/core-methods#showalternativebillingdialogandroid)** - Show Google\'s required information dialog\\n- **[`createAlternativeBillingTokenAndroid()`](/docs/api/core-methods#createalternativebillingtokenandroid)** - Generate reporting token after successful payment\\n\\n**Configuration Support:**\\n\\n```kotlin\\nimport io.github.hyochan.kmpiap.kmpIapInstance\\nimport io.github.hyochan.kmpiap.openiap.AlternativeBillingModeAndroid\\nimport io.github.hyochan.kmpiap.openiap.InitConnectionConfig\\n\\n// Initialize with alternative billing mode\\nval config = InitConnectionConfig(\\n    alternativeBillingModeAndroid = AlternativeBillingModeAndroid.UserChoice\\n    // Or: AlternativeBillingModeAndroid.AlternativeOnly\\n)\\n\\nval connected = kmpIapInstance.initConnection(config)\\n```\\n\\n**Two Billing Modes:**\\n\\n- `UserChoice` - Users choose between Google Play billing (30% fee) or your payment system (lower fee)\\n- `AlternativeOnly` - Only your payment system is available (Google Play billing disabled)\\n\\n**User Choice Mode Example:**\\n```kotlin\\nimport io.github.hyochan.kmpiap.kmpIapInstance\\nimport kotlinx.coroutines.flow.collect\\n\\n// Initialize with user-choice mode\\nval config = InitConnectionConfig(\\n    alternativeBillingModeAndroid = AlternativeBillingModeAndroid.UserChoice\\n)\\nkmpIapInstance.initConnection(config)\\n\\n// Listen for when user selects alternative billing\\nscope.launch {\\n    kmpIapInstance.userChoiceBillingListener.collect { details ->\\n        println(\\"User selected alternative billing\\")\\n        println(\\"Products: ${details.products}\\")\\n\\n        // Process payment in your system, then report token to Google\\n        processPaymentAndReportToken(details)\\n    }\\n}\\n```\\n\\n**Alternative Only Mode Example:**\\n```kotlin\\n// Step 1: Check availability\\nval isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\\n\\n// Step 2: Show Google\'s information dialog\\nval userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\\n\\nif (userAccepted) {\\n    // Step 3: Process payment in your system, then create token\\n    val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\\n\\n    // Step 4: Report token to Google Play backend within 24 hours\\n    reportTokenToGooglePlay(token)\\n}\\n```\\n\\n### \ud83c\udfa8 Alternative Billing Demo Screen\\n\\nA complete alternative billing demo screen has been added to the example app:\\n\\n- **Platform-specific flows** - Demonstrates iOS and Android alternative billing patterns\\n- **Billing mode toggle** (Android) - Switch between `AlternativeOnly` and `UserChoice` with auto-reconnect\\n- **External URL input** (iOS) - Configure and test external purchase links\\n- **Real-time results** - View purchase flow status and responses\\n- **Step-by-step guidance** - Visual flow diagrams for both platforms\\n\\nNavigate to `example/composeApp/src/commonMain/kotlin/dev/hyo/martie/screens/AlternativeBillingScreen.kt` to explore the implementation.\\n\\n## \ud83d\udc1b Bug Fixes & Improvements\\n\\n### Serialization Error Fix\\n\\nFixed a critical serialization issue in `AvailablePurchasesScreen` where `PurchaseIOS` and `PurchaseAndroid` objects couldn\'t be serialized directly. Now uses the `Purchase.toJson()` method for proper JSON serialization.\\n\\n**Before:**\\n```kotlin\\n// This would throw SerializationException\\nval jsonString = json.encodeToString(purchase)\\n```\\n\\n**After:**\\n```kotlin\\n// Uses the built-in toJson() method\\nval purchaseMap = purchase.toJson()\\nval jsonString = buildJsonString(purchaseMap)\\n```\\n\\n### iOS Subscription Enhancements\\n\\nAdded `renewalInfoIOS` field to `activeSubscription` (openiap-apple 1.2.24+), providing access to subscription renewal information including:\\n- Auto-renew status\\n- Expiration reason\\n- Grace period status\\n- Offer information\\n\\n## \u26a0\ufe0f Platform Requirements\\n\\n### iOS\\n\\n- **Minimum Version**: iOS 16.0+ for external purchase links, iOS 18.2+ for notice sheet\\n- **App Store Connect**: Must request and receive approval for external purchase entitlements\\n- **Provisioning Profile**: Must include StoreKit external purchase entitlements\\n- See [StoreKit External Purchase documentation](https://developer.apple.com/documentation/storekit/external-purchase)\\n\\n### Android\\n\\n- **Google Play Console**: Must be approved for alternative billing program\\n- **Token Reporting**: Must report tokens to Google within 24 hours\\n- **Backend Integration**: Server-side validation and reporting required\\n- See [Google Play Alternative Billing documentation](https://developer.android.com/google/play/billing/alternative)\\n\\n## \ud83d\udce6 Installation\\n\\n### Gradle (Kotlin DSL)\\n\\n```kotlin\\n// shared/build.gradle.kts\\nkotlin {\\n    sourceSets {\\n        commonMain.dependencies {\\n            implementation(\\"io.github.hyochan:kmp-iap:1.0.0-rc.4\\")\\n        }\\n    }\\n}\\n```\\n\\n### Gradle (Groovy)\\n\\n```groovy\\n// shared/build.gradle\\nkotlin {\\n    sourceSets {\\n        commonMain {\\n            dependencies {\\n                implementation \'io.github.hyochan:kmp-iap:1.0.0-rc.4\'\\n            }\\n        }\\n    }\\n}\\n```\\n\\n### Version Catalog (libs.versions.toml)\\n\\n```toml\\n[versions]\\nkmp-iap = \\"1.0.0-rc.4\\"\\n\\n[libraries]\\nkmp-iap = { module = \\"io.github.hyochan:kmp-iap\\", version.ref = \\"kmp-iap\\" }\\n```\\n\\nThen sync your Gradle project.\\n\\n## \ud83d\udea8 Important Notes\\n\\n### For iOS Developers\\n\\nAlternative billing on iOS requires explicit approval from Apple. During development:\\n\\n1. Configure entitlements and Info.plist as shown above\\n2. Test regular IAP flows without external purchase features\\n3. When ready for production, follow Apple\'s approval process for external purchase entitlements\\n\\n### For Android Developers\\n\\nAlternative billing on Android requires:\\n\\n1. Approval from Google Play Console for the alternative billing program\\n2. Backend integration to report tokens within 24 hours\\n3. Proper error handling for users not eligible for alternative billing\\n\\n**No Breaking Changes**: All changes are additive. Existing apps will continue to work without modifications.\\n\\n## \ud83d\udcd6 Documentation Updates\\n\\nThis release includes comprehensive documentation:\\n\\n- **[Alternative Billing Guide](/docs/guides/alternative-billing)** - Complete guide for implementing alternative billing\\n- **[Alternative Billing Example](/docs/examples/alternative-billing)** - Full code examples for both platforms\\n- **[Core Methods - Alternative Billing APIs](/docs/api/core-methods#ios-specific-alternative-billing)** - API reference\\n- **[OpenIAP Specification](https://openiap.dev)** - Official specification and terminology\\n\\n## \ud83d\udd17 References\\n\\n- [OpenIAP Monorepo](https://github.com/hyodotdev/openiap)\\n- [OpenIAP Documentation](https://openiap.dev)\\n- [StoreKit External Purchase](https://developer.apple.com/documentation/storekit/external-purchase)\\n- [Google Play Alternative Billing](https://developer.android.com/google/play/billing/alternative)\\n- [Example Implementation](https://github.com/hyochan/kmp-iap/blob/main/example/composeApp/src/commonMain/kotlin/dev/hyo/martie/screens/AlternativeBillingScreen.kt)\\n\\n## \ud83d\ude4f Acknowledgments\\n\\nSpecial thanks to the [OpenIAP](https://openiap.dev) project for providing the standardized specification that makes cross-platform IAP implementations possible.\\n\\nQuestions or issues? Let us know via [GitHub issues](https://github.com/hyochan/kmp-iap/issues)."},{"id":"/2025/08/20/rc1-simplified-api","metadata":{"permalink":"/kmp-iap/blog/2025/08/20/rc1-simplified-api","editUrl":"https://github.com/hyochan/kmp-iap/tree/main/docs/blog/2025-08-20-rc1-simplified-api.md","source":"@site/blog/2025-08-20-rc1-simplified-api.md","title":"v1.0.0-rc - Simplified API Design","description":"We\'re excited to announce the release of kmp-iap v1.0.0-rc, which brings significant API improvements that make in-app purchases even easier to implement in your Kotlin Multiplatform projects.","date":"2025-08-20T00:00:00.000Z","formattedDate":"August 20, 2025","tags":[{"label":"release","permalink":"/kmp-iap/blog/tags/release"},{"label":"api","permalink":"/kmp-iap/blog/tags/api"},{"label":"rc1","permalink":"/kmp-iap/blog/tags/rc-1"}],"readingTime":2.465,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of kmp-iap","url":"https://github.com/hyochan","imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"title":"v1.0.0-rc - Simplified API Design","authors":["hyochan"],"tags":["release","api","rc1"]},"unlisted":false,"prevItem":{"title":"1.0.0-rc.4 - OpenIAP Monorepo Conversion & Alternative Billing","permalink":"/kmp-iap/blog/1.0.0-rc.4"},"nextItem":{"title":"Comprehensive API Enhancements & OpenIAP Compliance in KMP-IAP v1.0.0-beta","permalink":"/kmp-iap/blog/comprehensive-api-enhancements"}},"content":"We\'re excited to announce the release of **kmp-iap v1.0.0-rc**, which brings significant API improvements that make in-app purchases even easier to implement in your Kotlin Multiplatform projects.\\n\\n## \ud83c\udfaf Key Changes\\n\\n### Simplified API Design\\n\\nWe\'ve removed unnecessary wrapper classes to make the API more intuitive and reduce boilerplate code. The core methods now accept parameters directly instead of requiring wrapper objects.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udcdd API Changes\\n\\n### 1. requestProducts() - Direct Parameters\\n\\n#### Before (v1.0.0-beta)\\n\\n```kotlin\\nval products = kmpIapInstance.requestProducts(\\n    ProductRequest(\\n        skus = listOf(\\"product_id\\"),\\n        type = ProductType.INAPP\\n    )\\n)\\n```\\n\\n#### After (v1.0.0-rc)\\n\\n```kotlin\\nval products = kmpIapInstance.requestProducts(\\n    skus = listOf(\\"product_id\\"),\\n    type = ProductType.INAPP\\n)\\n```\\n\\n### 2. requestPurchase() - Streamlined Parameters\\n\\n#### Before (v1.0.0-beta)\\n\\n```kotlin\\nval purchase = kmpIapInstance.requestPurchase(\\n    RequestPurchaseProps(\\n        ios = RequestPurchaseIosProps(\\n            sku = \\"product_id\\",\\n            quantity = 1\\n        ),\\n        android = RequestPurchaseAndroidProps(\\n            skus = listOf(\\"product_id\\")\\n        )\\n    )\\n)\\n```\\n\\n#### After (v1.0.0-rc)\\n\\n```kotlin\\n// Cross-platform purchase with DSL\\nval purchase = kmpIapInstance.requestPurchase {\\n    ios {\\n        sku = \\"product_id\\"\\n        quantity = 1\\n    }\\n    android {\\n        skus = listOf(\\"product_id\\")\\n    }\\n}\\n\\n// Single platform purchase\\nval iosPurchase = kmpIapInstance.requestPurchase {\\n    ios {\\n        sku = \\"product_id\\"\\n    }\\n}\\n```\\n\\n## \ud83d\ude80 Migration Guide\\n\\n### Update Your Gradle Dependencies\\n\\n```kotlin\\ndependencies {\\n    implementation(\\"io.github.hyochan:kmp-iap:1.0.0-rc.2\\")\\n}\\n```\\n\\n### Code Migration\\n\\nThe migration is straightforward - simply remove the wrapper classes:\\n\\n1. **For `requestProducts()`**: Remove `ProductRequest` wrapper\\n2. **For `requestPurchase()`**: Remove `RequestPurchaseProps` wrapper and pass parameters directly\\n\\n### Complete Example\\n\\nHere\'s a complete example showing the new simplified API:\\n\\n```kotlin\\nimport io.github.hyochan.kmpiap.kmpIapInstance\\nimport io.github.hyochan.kmpiap.*\\n\\nclass StoreViewModel {\\n    suspend fun loadProducts() {\\n        // Initialize connection\\n        val connected = kmpIapInstance.initConnection()\\n        if (!connected) return\\n\\n        // Load products - no wrapper needed\\n        val products = kmpIapInstance.requestProducts(\\n            skus = listOf(\\"premium\\", \\"coins_100\\", \\"coins_500\\"),\\n            type = ProductType.INAPP\\n        )\\n\\n        // Load subscriptions\\n        val subscriptions = kmpIapInstance.requestProducts(\\n            skus = listOf(\\"monthly_sub\\", \\"yearly_sub\\"),\\n            type = ProductType.SUBS\\n        )\\n    }\\n\\n    suspend fun purchaseProduct(productId: String) {\\n        // Simple purchase - just pass the SKU\\n        val purchase = kmpIapInstance.requestPurchase(sku = productId)\\n\\n        // Handle the purchase\\n        kmpIapInstance.finishTransaction(\\n            purchase = purchase,\\n            isConsumable = true\\n        )\\n    }\\n\\n    suspend fun purchaseWithOptions(productId: String) {\\n        // Purchase with platform-specific options\\n        val purchase = kmpIapInstance.requestPurchase(\\n            sku = productId,\\n            ios = RequestPurchaseIosProps(\\n                sku = productId,\\n                quantity = 1,\\n                appAccountToken = \\"user_token\\"\\n            ),\\n            android = RequestPurchaseAndroidProps(\\n                skus = listOf(productId),\\n                obfuscatedAccountIdAndroid = \\"user_123\\"\\n            )\\n        )\\n    }\\n}\\n```\\n\\n## \u2728 Benefits\\n\\n1. **Cleaner Code**: Less boilerplate, more readable code\\n2. **Easier to Use**: Direct parameter passing is more intuitive\\n3. **Better IDE Support**: Better auto-completion and parameter hints\\n4. **Backward Compatible**: Platform-specific options still available when needed\\n\\n## \ud83d\udd04 What\'s Next\\n\\nThis RC1 release brings us closer to the stable 1.0.0 release. We\'re focusing on:\\n\\n- Final testing and bug fixes\\n- Documentation improvements\\n- Community feedback integration\\n\\n## \ud83d\udcda Resources\\n\\n- [API Documentation](/docs/api/core-methods)\\n- [Getting Started Guide](/docs/getting-started/quickstart)\\n- [GitHub Repository](https://github.com/hyochan/kmp-iap)\\n- [OpenIAP Specification](https://www.openiap.dev)\\n\\n## \ud83d\ude4f Feedback\\n\\nPlease try out the new API and let us know your feedback! Report any issues on our [GitHub Issues](https://github.com/hyochan/kmp-iap/issues) page.\\n\\nHappy coding! \ud83c\udf89"},{"id":"comprehensive-api-enhancements","metadata":{"permalink":"/kmp-iap/blog/comprehensive-api-enhancements","editUrl":"https://github.com/hyochan/kmp-iap/tree/main/docs/blog/2025-08-18-comprehensive-api-enhancements.md","source":"@site/blog/2025-08-18-comprehensive-api-enhancements.md","title":"Comprehensive API Enhancements & OpenIAP Compliance in KMP-IAP v1.0.0-beta","description":"Complete platform parity with enhanced Android/iOS fields, OpenIAP specification compliance, unified API structure, and improved type safety","date":"2025-08-18T00:00:00.000Z","formattedDate":"August 18, 2025","tags":[{"label":"android","permalink":"/kmp-iap/blog/tags/android"},{"label":"ios","permalink":"/kmp-iap/blog/tags/ios"},{"label":"api-enhancement","permalink":"/kmp-iap/blog/tags/api-enhancement"},{"label":"naming-conventions","permalink":"/kmp-iap/blog/tags/naming-conventions"},{"label":"purchase-types","permalink":"/kmp-iap/blog/tags/purchase-types"},{"label":"storekit","permalink":"/kmp-iap/blog/tags/storekit"},{"label":"google-play-billing","permalink":"/kmp-iap/blog/tags/google-play-billing"},{"label":"openiap","permalink":"/kmp-iap/blog/tags/openiap"},{"label":"specification","permalink":"/kmp-iap/blog/tags/specification"},{"label":"api-standardization","permalink":"/kmp-iap/blog/tags/api-standardization"},{"label":"type-safety","permalink":"/kmp-iap/blog/tags/type-safety"},{"label":"cross-platform","permalink":"/kmp-iap/blog/tags/cross-platform"},{"label":"standards-compliance","permalink":"/kmp-iap/blog/tags/standards-compliance"}],"readingTime":10.75,"hasTruncateMarker":true,"authors":[{"name":"KMP-IAP Team","title":"Maintainer","url":"https://github.com/hyochan/kmp-iap","image_url":"https://github.com/hyochan.png","imageURL":"https://github.com/hyochan.png"}],"frontMatter":{"title":"Comprehensive API Enhancements & OpenIAP Compliance in KMP-IAP v1.0.0-beta","description":"Complete platform parity with enhanced Android/iOS fields, OpenIAP specification compliance, unified API structure, and improved type safety","slug":"comprehensive-api-enhancements","authors":[{"name":"KMP-IAP Team","title":"Maintainer","url":"https://github.com/hyochan/kmp-iap","image_url":"https://github.com/hyochan.png","imageURL":"https://github.com/hyochan.png"}],"tags":["android","ios","api-enhancement","naming-conventions","purchase-types","storekit","google-play-billing","openiap","specification","api-standardization","type-safety","cross-platform","standards-compliance"],"hide_table_of_contents":false,"date":"2025-08-18T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"v1.0.0-rc - Simplified API Design","permalink":"/kmp-iap/blog/2025/08/20/rc1-simplified-api"},"nextItem":{"title":"Initial Release - StoreKit 2 and Google Play Billing Library Support","permalink":"/kmp-iap/blog/initial-release"}},"content":"We\'re thrilled to announce the most comprehensive update to KMP-IAP yet! Version 1.0.0-beta brings complete platform parity, **100% compliance with the OpenIAP specification**, improved naming conventions, and extensive field additions for both Android and iOS platforms.\\n\\n\x3c!--truncate--\x3e\\n\\n## \ud83d\udce2 OpenIAP Specification: The New Standard\\n\\nKMP-IAP v1.0.0-beta achieves **100% compliance** with the [OpenIAP specification](https://openiap.dev), providing a standardized approach to in-app purchases across different platforms and libraries. By adopting this specification, KMP-IAP now offers:\\n\\n- **Standardized Types**: Consistent data structures across platforms\\n- **Unified API**: Common interface patterns for all IAP operations\\n- **Cross-Platform Compatibility**: Seamless integration with other OpenIAP-compliant libraries\\n- **Future-Proof Architecture**: Ready for emerging platforms and specifications\\n\\nVisit [openiap.dev](https://openiap.dev) to learn more about the specification.\\n\\n## \ud83d\ude80 What\'s New\\n\\n### Enhanced Android Product Support\\n\\nComplete Google Play Billing `ProductDetails` API parity with new fields:\\n\\n#### Product Type Fields\\n\\n- **`typeAndroid`**: `String?` - Product type (\\"inapp\\" or \\"subs\\") from `productDetails.productType`\\n- **`nameAndroid`**: `String?` - Product display name from `productDetails.name` (different from title)\\n- **`displayPriceAndroid`**: `String?` - Formatted display price ready for UI\\n\\n#### One-Time Purchase Details\\n\\n- **`oneTimePurchaseOfferDetails`**: `OneTimePurchaseOfferDetails?` - Complete pricing information:\\n  ```kotlin\\n  data class OneTimePurchaseOfferDetails(\\n      val priceCurrencyCode: String,     // ISO 4217 currency code (e.g., \\"USD\\")\\n      val formattedPrice: String,        // Human-readable price (e.g., \\"$0.99\\")\\n      val priceAmountMicros: String      // Price in micros (e.g., \\"990000\\")\\n  )\\n  ```\\n\\n### Enhanced iOS Transaction Support\\n\\nFollowing StoreKit 2 Transaction API with comprehensive field mapping for iOS 15.0+:\\n\\n#### Core iOS Fields (Already Supported)\\n\\n- `quantityIOS`: Purchase quantity\\n- `originalTransactionDateIOS`: Original purchase date\\n- `originalTransactionIdIOS`: Original transaction identifier\\n- `appBundleIdIOS`: App bundle identifier\\n- `productTypeIOS`: Product type (consumable, non-consumable, etc.)\\n- `subscriptionGroupIdIOS`: Subscription group identifier\\n\\n#### Enhanced iOS Fields for Future StoreKit 2 Support\\n\\nWhen StoreKit 2 support is added, these fields will be available:\\n\\n- `signedDateIOS`: Transaction signing date\\n- `deviceVerificationIOS`: Device verification data\\n- `deviceVerificationNonceIOS`: Device verification nonce\\n- `offerIdIOS`: Promotional offer identifier\\n- `offerTypeIOS`: Offer type (introductory, promotional, code)\\n- `subscriptionPeriodIOS`: Subscription period unit\\n- `environmentIOS`: Store environment (Sandbox/Production) - iOS 16.0+\\n- `storefrontCountryCodeIOS`: Storefront country code - iOS 17.0+\\n- `reasonIOS`: Transaction reason - iOS 17.0+\\n\\n### Enhanced Purchase Type Support\\n\\nComprehensive purchase data capture with new Android fields:\\n\\n#### New Android Purchase Fields\\n\\n- **`dataAndroid`**: `String?` - Original JSON data from purchase\\n- **`obfuscatedAccountIdAndroid`**: `String?` - Account identifier for purchase attribution\\n- **`obfuscatedProfileIdAndroid`**: `String?` - Profile identifier for user segmentation\\n\\n#### Enhanced Error Handling\\n\\n- **`subResponseCode`**: `Int?` - Android billing v8.0.0+ sub-response code for detailed error info\\n- **`subResponseMessage`**: `String?` - Human-readable message for sub-response codes\\n\\n```kotlin\\n// Example: Enhanced error handling\\ntry {\\n    val purchase = kmpIapInstance.requestPurchase(request)\\n} catch (error: PurchaseError) {\\n    when (error.subResponseCode) {\\n        1 -> println(\\"Payment declined: ${error.subResponseMessage}\\")\\n        // Handle specific billing errors\\n        else -> println(\\"General error: ${error.message}\\")\\n    }\\n}\\n```\\n\\n## \ud83c\udfaf Complete Type System Overhaul\\n\\n### OpenIAP-Compliant Base Types\\n\\nFollowing the OpenIAP specification, all types now implement standardized interfaces:\\n\\n```kotlin\\n// ProductCommon interface - OpenIAP base specification\\ninterface ProductCommon {\\n    val id: String              // Unified product identifier\\n    val title: String           // Product title\\n    val description: String     // Product description\\n    val type: ProductType       // \\"inapp\\" or \\"subs\\"\\n    val displayName: String?    // Optional display name\\n    val displayPrice: String    // Formatted price for display\\n    val currency: String        // ISO currency code\\n    val price: Double?          // Numeric price value\\n    val debugDescription: String?\\n    val platform: String?       // Platform identifier\\n}\\n\\n// PurchaseCommon interface - OpenIAP base specification\\ninterface PurchaseCommon {\\n    val id: String              // Transaction identifier\\n    val productId: String       // Product that was purchased\\n    val ids: List<String>?      // Multiple product IDs (Android)\\n    val transactionId: String?  // @deprecated - use id instead\\n    val transactionDate: Double // Unix timestamp\\n    val transactionReceipt: String\\n    val purchaseToken: String?  // Unified token field\\n    val platform: String?\\n}\\n```\\n\\n### Platform-Specific Implementation Types\\n\\nFollowing OpenIAP naming conventions with proper platform suffixes:\\n\\n```kotlin\\n// iOS Product (ProductIOS)\\ndata class ProductIOS(\\n    // ProductCommon fields\\n    override val id: String,\\n    override val title: String,\\n    // ... other base fields\\n\\n    // iOS-specific fields with IOS suffix\\n    val displayNameIOS: String,\\n    val isFamilyShareableIOS: Boolean,\\n    val jsonRepresentationIOS: String,\\n    val subscriptionInfoIOS: SubscriptionInfoIOS? = null,\\n\\n    // Backward compatibility (deprecated)\\n    @Deprecated(\\"Use displayNameIOS\\") val displayName: String? = null,\\n    override val platform: String = \\"ios\\"\\n) : ProductCommon\\n\\n// Android Product (ProductAndroid)\\ndata class ProductAndroid(\\n    // ProductCommon fields\\n    override val id: String,\\n    override val title: String,\\n    // ... other base fields\\n\\n    // Android-specific fields with Android suffix\\n    val nameAndroid: String,\\n    val oneTimePurchaseOfferDetailsAndroid: ProductAndroidOneTimePurchaseOfferDetail? = null,\\n    val subscriptionOfferDetailsAndroid: List<ProductSubscriptionAndroidOfferDetail>? = null,\\n\\n    // Backward compatibility (deprecated)\\n    @Deprecated(\\"Use nameAndroid\\") val name: String? = null,\\n    override val platform: String = \\"android\\"\\n) : ProductCommon\\n```\\n\\n## \ud83d\udcd0 Improved Naming Conventions\\n\\n### Consistent Platform Suffixes\\n\\nFollowing OpenIAP and our internal CLAUDE.md guidelines:\\n\\n```kotlin\\n// \u2705 CORRECT: Platform suffix at the end\\nval quantityIOS: Int\\nval environmentIOS: String\\nval appBundleIdIOS: String\\nval purchaseTokenAndroid: String\\nval packageNameAndroid: String\\n\\n// \u274c INCORRECT: Platform prefix\\nval iosQuantity: Int\\nval androidPurchaseToken: String\\n```\\n\\n### Type Name Changes\\n\\n| Old Name                    | New Name                    |\\n| --------------------------- | --------------------------- |\\n| `IosTransactionState`       | `TransactionStateIOS`       |\\n| `IosSubscriptionPeriodUnit` | `SubscriptionPeriodUnitIOS` |\\n| `IosDiscountPaymentMode`    | `DiscountPaymentModeIOS`    |\\n| `IosDiscountType`           | `DiscountTypeIOS`           |\\n| `SubscriptionIosPeriod`     | `SubscriptionPeriodIOS`     |\\n| `IapPlatform`               | `IapPlatform`               |\\n\\n### ID Naming Consistency\\n\\n```kotlin\\n// \u2705 CORRECT: Use \\"Id\\" not \\"ID\\"\\nval productId: String\\nval transactionId: String\\nval subscriptionGroupId: String\\nval orderIdAndroid: String\\nval originalTransactionIdIOS: String\\n\\n// \u274c INCORRECT: Using \\"ID\\"\\nval productID: String\\nval transactionID: String\\n```\\n\\n### IAP Acronym Usage\\n\\n```kotlin\\n// \u2705 CORRECT: IAP as final word\\nclass KmpIAP\\nval kmpIAP = KmpIAP()\\n\\n// \u2705 CORRECT: Iap when followed by other words\\nval kmpIapInstance: KmpIAP\\nenum class IapPlatform { IOS, ANDROID }\\n\\n// \u274c INCORRECT: Inconsistent usage\\nval kmpIAPInstance: KmpIAP\\n```\\n\\n## \ud83d\udee0 Platform API Mapping\\n\\n### Android Product Mapping\\n\\n```kotlin\\n// Native Android ProductDetails mapping\\nmapOf(\\n    \\"id\\" to productDetails.productId,               // -> id\\n    \\"title\\" to productDetails.title,                // -> title\\n    \\"description\\" to productDetails.description,    // -> description\\n    \\"type\\" to productDetails.productType,          // -> typeAndroid\\n    \\"displayName\\" to productDetails.name,           // -> nameAndroid\\n    \\"displayPrice\\" to displayPrice,                 // -> displayPriceAndroid\\n    \\"oneTimePurchaseOfferDetails\\" to offerDetails,  // -> oneTimePurchaseOfferDetails\\n    \\"subscriptionOfferDetails\\" to subscriptions     // -> subscriptionOfferDetails\\n)\\n```\\n\\n### Android Purchase Mapping\\n\\n```kotlin\\n// Native Android Purchase mapping\\nval purchaseData = mapOf(\\n    \\"id\\" to purchase.orderId,                       // -> id\\n    \\"productId\\" to purchase.products.first(),       // -> productId\\n    \\"purchaseToken\\" to purchase.purchaseToken,      // -> purchaseToken\\n    \\"dataAndroid\\" to purchase.originalJson,         // -> dataAndroid \u2728 NEW\\n    \\"signatureAndroid\\" to purchase.signature,       // -> signatureAndroid\\n    \\"obfuscatedAccountId\\" to accountId,             // -> obfuscatedAccountIdAndroid \u2728 NEW\\n    \\"obfuscatedProfileId\\" to profileId              // -> obfuscatedProfileIdAndroid \u2728 NEW\\n)\\n```\\n\\n### iOS Transaction Support (Current + Future)\\n\\n```swift\\n// Current StoreKit 1 support + Future StoreKit 2 fields\\nlet transactionData = [\\n    \\"id\\": transaction.id,                           // -> id\\n    \\"productId\\": transaction.productID,             // -> productId\\n    \\"quantityIOS\\": transaction.purchasedQuantity,   // -> quantityIOS\\n\\n    // Future StoreKit 2 fields\\n    \\"signedDateIOS\\": transaction.signedDate,        // -> signedDateIOS\\n    \\"deviceVerificationIOS\\": deviceVerification,    // -> deviceVerificationIOS\\n    \\"offerIdIOS\\": transaction.offerID,             // -> offerIdIOS\\n    \\"environmentIOS\\": transaction.environment       // -> environmentIOS (iOS 16.0+)\\n]\\n```\\n\\n## \ud83d\udcf1 Usage Examples\\n\\n### Enhanced Android Product Usage\\n\\n```kotlin\\nval products = kmpIapInstance.requestProducts(\\n    ProductRequest(listOf(\\"premium_upgrade\\"), ProductType.INAPP)\\n)\\n\\nproducts.forEach { product ->\\n    // Use enhanced Android fields\\n    val displayName = product.nameAndroid ?: product.title\\n    val displayPrice = product.displayPriceAndroid ?: product.price\\n\\n    // Check product type\\n    when (product.typeAndroid) {\\n        \\"inapp\\" -> println(\\"One-time purchase: $displayName\\")\\n        \\"subs\\" -> println(\\"Subscription: $displayName\\")\\n    }\\n\\n    // Access detailed pricing for one-time purchases\\n    product.oneTimePurchaseOfferDetails?.let { offer ->\\n        println(\\"Price: ${offer.formattedPrice}\\")\\n        println(\\"Currency: ${offer.priceCurrencyCode}\\")\\n\\n        // Convert micros to decimal\\n        val actualPrice = offer.priceAmountMicros.toLong() / 1_000_000.0\\n        println(\\"Decimal price: $actualPrice\\")\\n    }\\n}\\n```\\n\\n### Enhanced Purchase Handling\\n\\n```kotlin\\n// Listen for purchase updates with enhanced data\\nkmpIapInstance.purchaseUpdatedListener.collect { purchase ->\\n    // Validate receipt with your backend\\n    val receiptData = PurchaseReceiptData(\\n        purchaseToken = purchase.purchaseToken,\\n        originalJson = purchase.dataAndroid,  // \u2728 NEW: Full purchase data\\n        signature = purchase.signatureAndroid,\\n        accountId = purchase.obfuscatedAccountIdAndroid,  // \u2728 NEW: User attribution\\n        profileId = purchase.obfuscatedProfileIdAndroid   // \u2728 NEW: Profile tracking\\n    )\\n\\n    val isValid = validateReceiptOnServer(receiptData)\\n\\n    if (isValid) {\\n        grantEntitlement(purchase.productId)\\n        kmpIapInstance.finishTransaction(purchase, isConsumable = true)\\n    }\\n}\\n```\\n\\n### Enhanced Error Handling\\n\\n```kotlin\\nkmpIapInstance.purchaseErrorListener.collect { error ->\\n    when (error.code) {\\n        \\"E_USER_CANCELLED\\" -> showUserCancelledMessage()\\n        \\"E_PAYMENT_DECLINED\\" -> {\\n            // Enhanced Android error handling\\n            when (error.subResponseCode) {\\n                1 -> showInsufficientFundsMessage(error.subResponseMessage)\\n                else -> showGenericPaymentError(error.message)\\n            }\\n        }\\n        else -> showGenericError(error.message)\\n    }\\n}\\n```\\n\\n## \ud83d\udd04 Migration Guide\\n\\n### Unified Purchase Request Structure\\n\\nReplace old request structures with OpenIAP-compliant ones:\\n\\n```kotlin\\n// \u274c OLD: UnifiedPurchaseRequest (deprecated)\\nval purchase = kmpIapInstance.requestPurchase(\\n    UnifiedPurchaseRequest(\\n        sku = \\"premium\\",\\n        quantity = 1\\n    )\\n)\\n\\n// \u2705 NEW: OpenIAP-compliant RequestPurchaseProps\\nval purchase = kmpIapInstance.requestPurchase(\\n    RequestPurchaseProps(\\n        ios = RequestPurchaseIosProps(\\n            sku = \\"premium\\",\\n            quantity = 1\\n        ),\\n        android = RequestPurchaseAndroidProps(\\n            skus = listOf(\\"premium\\")\\n        )\\n    )\\n)\\n```\\n\\n### Type Names (Automatic via Type Aliases)\\n\\nThe library provides type aliases for renamed types, so existing code continues to work:\\n\\n```kotlin\\n// These imports automatically use the new names\\nimport io.github.hyochan.kmpiap.*\\n\\n// Your existing code works unchanged\\nval state: TransactionStateIOS = TransactionStateIOS.PURCHASED\\n```\\n\\n### New Optional Fields\\n\\nAll new fields are optional (`nullable`), so no migration is required:\\n\\n```kotlin\\n// Existing code works unchanged\\nval purchase = kmpIapInstance.requestPurchase(request)\\n\\n// New fields available when needed\\nval accountId = purchase.obfuscatedAccountIdAndroid  // null if not available\\nval originalData = purchase.dataAndroid              // null if not available\\n```\\n\\n### Unified Purchase Token Access\\n\\n```kotlin\\n// \u2705 NEW: Unified purchaseToken field\\nval token = purchase.purchaseToken\\n\\n// \u2705 FALLBACK: Platform-specific deprecated fields still work\\nval tokenFallback = (purchase as? PurchaseAndroid)?.purchaseTokenAndroid\\n    ?: (purchase as? PurchaseIOS)?.jwsRepresentationIOS\\n```\\n\\n## \ud83c\udfaf Why These Changes Matter\\n\\n### OpenIAP Standards Compliance\\n\\n- **Industry Standard**: Follows the OpenIAP specification for cross-library compatibility\\n- **Interoperability**: Libraries can work together seamlessly\\n- **Community Standards**: Shared best practices across the ecosystem\\n- **Innovation**: Focus on features, not API design\\n\\n### Complete Platform Parity\\n\\n- **Android**: Full Google Play Billing API coverage\\n- **iOS**: Comprehensive StoreKit field mapping (current + future StoreKit 2)\\n- **Consistent**: Unified API across platforms\\n\\n### Better Developer Experience\\n\\n- **Type Safety**: All fields properly typed with clear nullability\\n- **Consistent Naming**: Platform suffixes make code more readable\\n- **Enhanced Documentation**: Every field documented with usage examples\\n- **Easier Migration**: Move between OpenIAP-compliant libraries seamlessly\\n\\n### Improved App Quality\\n\\n- **Better User Experience**: Access to localized names and formatted prices\\n- **Enhanced Analytics**: User attribution with account/profile IDs\\n- **Robust Error Handling**: Detailed error codes for better UX\\n- **Reduced Bugs**: Standardized error codes and handling\\n\\n### Future-Proof\\n\\n- **StoreKit 2 Ready**: Field structure prepared for StoreKit 2 migration\\n- **Extensible**: Easy to add new platform-specific fields\\n- **Backward Compatible**: Existing code continues to work\\n- **Ready for New Platforms**: Architecture supports emerging platforms\\n\\n## \ud83d\udcda Complete API Reference\\n\\n### Product Type Fields\\n\\n```kotlin\\ndata class Product(\\n    // Core fields\\n    val id: String,\\n    val title: String,\\n    val description: String,\\n    val price: String,\\n    val priceAmount: Double,\\n    val currency: String,\\n\\n    // iOS-specific fields\\n    val displayName: String? = null,\\n    val isFamilyShareable: Boolean = false,\\n    val discounts: List<Discount>? = null,\\n\\n    // Android-specific fields \u2728\\n    val nameAndroid: String? = null,              // Product display name\\n    val typeAndroid: String? = null,              // \\"inapp\\" or \\"subs\\"\\n    val displayPriceAndroid: String? = null,      // Formatted price\\n    val oneTimePurchaseOfferDetails: OneTimePurchaseOfferDetails? = null,\\n    val subscriptionOfferDetails: List<OfferDetail>? = null,\\n\\n    val platform: IapPlatform\\n)\\n```\\n\\n### Purchase Type Fields\\n\\n```kotlin\\ndata class Purchase(\\n    // Core fields\\n    val id: String,\\n    val productId: String,\\n    val transactionDate: Double,\\n    val transactionReceipt: String,\\n    val purchaseToken: String? = null,\\n\\n    // iOS-specific fields\\n    val quantityIOS: Int? = null,\\n    val originalTransactionDateIOS: Double? = null,\\n    val originalTransactionIdIOS: String? = null,\\n    // ... other iOS fields\\n\\n    // Android-specific fields \u2728\\n    val purchaseStateAndroid: Int? = null,\\n    val signatureAndroid: String? = null,\\n    val autoRenewingAndroid: Boolean? = null,\\n    val acknowledgedAndroid: Boolean? = null,\\n    val dataAndroid: String? = null,                    // \u2728 NEW\\n    val obfuscatedAccountIdAndroid: String? = null,     // \u2728 NEW\\n    val obfuscatedProfileIdAndroid: String? = null,     // \u2728 NEW\\n\\n    val platform: IapPlatform\\n)\\n```\\n\\n### Error Type Fields\\n\\n```kotlin\\nclass PurchaseError(\\n    val code: String,\\n    override val message: String,\\n    val productId: String? = null,\\n    val responseCode: Int? = null,\\n    val debugMessage: String? = null,\\n    val platform: IapPlatform? = null,\\n    val subResponseCode: Int? = null,        // \u2728 NEW: Android v8.0.0+\\n    val subResponseMessage: String? = null   // \u2728 NEW: Detailed error message\\n) : Exception(message)\\n```\\n\\n## \ud83d\ude80 Get Started\\n\\nUpdate to KMP-IAP v1.0.0-beta today:\\n\\n```kotlin\\nimplementation(\\"io.github.hyochan:kmp-iap:1.0.0-beta.14\\")\\n```\\n\\n### Documentation Links\\n\\n- **[OpenIAP Specification](https://openiap.dev)** - Learn about the standard\\n- **[Complete API Documentation](https://hyochan.github.io/kmp-iap)** - Complete API reference\\n\\n## \ud83c\udf89 What\'s Next\\n\\n### OpenIAP Ecosystem Integration\\n\\n- Cross-library compatibility testing\\n- Shared validation utilities\\n- Common testing frameworks\\n\\n### Enhanced Standards Compliance\\n\\n- Receipt validation standardization\\n- Promotional offers specification\\n- Subscription management patterns\\n\\n### Platform Extensions\\n\\n- **StoreKit 2 Implementation**: Complete iOS StoreKit 2 support with all enhanced fields\\n- **Advanced Subscription Management**: Enhanced subscription lifecycle APIs\\n- **Promotional Offers**: Comprehensive promotional offer handling for both platforms\\n- **Web IAP Integration**: Support for web platforms\\n- **Desktop Platform Support**: Native desktop IAP integration\\n\\n---\\n\\nHave questions or feedback? Join the discussion on [GitHub](https://github.com/hyochan/kmp-iap) or contribute to the project!\\n\\nFor new feature proposals, discuss at [OpenIAP Discussions](https://github.com/hyochan/openiap.dev/discussions) to ensure alignment with standards.\\n\\n_This update represents months of work to provide the most comprehensive and standards-compliant cross-platform IAP solution available. Thank you to all contributors and users who made this possible!_"},{"id":"initial-release","metadata":{"permalink":"/kmp-iap/blog/initial-release","editUrl":"https://github.com/hyochan/kmp-iap/tree/main/docs/blog/2025-08-10-initial-release.md","source":"@site/blog/2025-08-10-initial-release.md","title":"Initial Release - StoreKit 2 and Google Play Billing Library Support","description":"kmp-iap Initial Release \ud83c\udf89","date":"2025-08-10T00:00:00.000Z","formattedDate":"August 10, 2025","tags":[{"label":"release","permalink":"/kmp-iap/blog/tags/release"},{"label":"StoreKit2","permalink":"/kmp-iap/blog/tags/store-kit-2"},{"label":"android","permalink":"/kmp-iap/blog/tags/android"},{"label":"billing","permalink":"/kmp-iap/blog/tags/billing"}],"readingTime":1.11,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Maintainer of kmp-iap","url":"https://github.com/hyochan","imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"initial-release","title":"Initial Release - StoreKit 2 and Google Play Billing Library Support","authors":["hyochan"],"tags":["release","StoreKit2","android","billing"]},"unlisted":false,"prevItem":{"title":"Comprehensive API Enhancements & OpenIAP Compliance in KMP-IAP v1.0.0-beta","permalink":"/kmp-iap/blog/comprehensive-api-enhancements"}},"content":"## kmp-iap Initial Release \ud83c\udf89\\n\\nWe\'re excited to announce the first release of **kmp-iap**, a unified in-app purchase library for Kotlin Multiplatform!\\n\\n## Key Features\\n\\n### \ud83c\udf4e iOS - Full StoreKit 2 Support\\n\\n- Complete support for Apple\'s latest StoreKit 2 framework\\n- Enhanced purchase verification and transaction management\\n- Improved subscription status tracking\\n- Leverages modern Swift async/await patterns\\n\\n### \ud83e\udd16 Android - Google Play Billing Library 7.1.1 Support\\n\\nSupporting Google Play Billing Library 7.1.1 with comprehensive features:\\n\\n- **Product Details API**: Modern API for querying product information\\n- **Subscription offers**: Support for multiple subscription offers and pricing phases\\n- **Pending purchases**: Full support for pending transactions\\n- **Error handling**: Detailed error codes and debugging information\\n- **Purchase verification**: Secure purchase token verification\\n\\n### \ud83c\udfaf Unified API\\n\\n- Same API for in-app purchases on both iOS and Android\\n- Reactive programming with Kotlin Coroutines and Flow\\n- Type-safe Kotlin native implementation\\n\\n## Getting Started\\n\\n```kotlin\\n// Initialize\\nKmpIAP.initConnection()\\n\\n// Load products\\nval products = KmpIAP.requestProducts(\\n    ProductRequest(\\n        skus = listOf(\\"product_id\\"),\\n        type = ProductType.INAPP\\n    )\\n)\\n\\n// Request purchase\\nKmpIAP.requestPurchase(\\n    UnifiedPurchaseRequest(\\n        sku = \\"product_id\\",\\n        quantity = 1\\n    )\\n)\\n\\n// Observe purchase state\\nKmpIAP.purchaseUpdatedListener.collect { purchase ->\\n    // Handle purchase\\n}\\n```\\n\\n## Next Steps\\n\\nWe\'ll continue to improve the library and add new features. Your feedback and contributions are welcome!\\n\\nGitHub: [https://github.com/hyochan/kmp-iap](https://github.com/hyochan/kmp-iap)"}]}')}}]);