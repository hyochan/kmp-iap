"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[1710],{3008:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=n(4848),s=n(8453);const o={title:"Error Codes",sidebar_position:6},l="Error Codes",d={id:"api/error-codes",title:"Error Codes",description:"Comprehensive error handling reference for kmp-iap. The library follows the OpenIAP specification for standardized error codes across platforms.",source:"@site/docs/api/error-codes.md",sourceDirName:"api",slug:"/api/error-codes",permalink:"/kmp-iap/docs/api/error-codes",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/docs/api/error-codes.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Error Codes",sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Listeners",permalink:"/kmp-iap/docs/api/listeners"},next:{title:"Basic Store",permalink:"/kmp-iap/docs/examples/basic-store"}},a={},c=[{value:"Error Types",id:"error-types",level:2},{value:"PurchaseError",id:"purchaseerror",level:3},{value:"OpenIAP Error Code Reference",id:"openiap-error-code-reference",level:2},{value:"ErrorCode Enum",id:"errorcode-enum",level:3},{value:"Error Code Details",id:"error-code-details",level:2},{value:"General Errors",id:"general-errors",level:3},{value:"E_UNKNOWN",id:"e_unknown",level:4},{value:"E_DEVELOPER_ERROR",id:"e_developer_error",level:4},{value:"User Action Errors",id:"user-action-errors",level:3},{value:"E_USER_CANCELLED",id:"e_user_cancelled",level:4},{value:"E_USER_ERROR",id:"e_user_error",level:4},{value:"E_DEFERRED_PAYMENT",id:"e_deferred_payment",level:4},{value:"E_INTERRUPTED",id:"e_interrupted",level:4},{value:"Product Errors",id:"product-errors",level:3},{value:"E_ITEM_UNAVAILABLE",id:"e_item_unavailable",level:4},{value:"E_PRODUCT_NOT_AVAILABLE",id:"e_product_not_available",level:4},{value:"E_PRODUCT_ALREADY_OWNED",id:"e_product_already_owned",level:4},{value:"E_ALREADY_OWNED",id:"e_already_owned",level:4},{value:"Network &amp; Service Errors",id:"network--service-errors",level:3},{value:"E_NETWORK_ERROR",id:"e_network_error",level:4},{value:"E_SERVICE_ERROR",id:"e_service_error",level:4},{value:"E_REMOTE_ERROR",id:"e_remote_error",level:4},{value:"E_CONNECTION_CLOSED",id:"e_connection_closed",level:4},{value:"E_IAP_NOT_AVAILABLE",id:"e_iap_not_available",level:4},{value:"E_SYNC_ERROR",id:"e_sync_error",level:4},{value:"Validation Errors",id:"validation-errors",level:3},{value:"E_RECEIPT_FAILED",id:"e_receipt_failed",level:4},{value:"E_RECEIPT_FINISHED",id:"e_receipt_finished",level:4},{value:"E_RECEIPT_FINISHED_FAILED",id:"e_receipt_finished_failed",level:4},{value:"E_TRANSACTION_VALIDATION_FAILED",id:"e_transaction_validation_failed",level:4},{value:"Platform-Specific Errors",id:"platform-specific-errors",level:3},{value:"E_PENDING (Android)",id:"e_pending-android",level:4},{value:"E_NOT_ENDED (iOS)",id:"e_not_ended-ios",level:4},{value:"E_NOT_PREPARED",id:"e_not_prepared",level:4},{value:"E_ALREADY_PREPARED",id:"e_already_prepared",level:4},{value:"E_BILLING_RESPONSE_JSON_PARSE_ERROR (Android)",id:"e_billing_response_json_parse_error-android",level:4},{value:"E_PURCHASE_ERROR",id:"e_purchase_error",level:4},{value:"E_ACTIVITY_UNAVAILABLE (Android)",id:"e_activity_unavailable-android",level:4},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"1. Centralized Error Handler",id:"1-centralized-error-handler",level:3},{value:"2. User-Friendly Messages",id:"2-user-friendly-messages",level:3},{value:"3. Error Recovery Strategies",id:"3-error-recovery-strategies",level:3},{value:"4. Debug Logging",id:"4-debug-logging",level:3},{value:"Platform Error Code Mapping",id:"platform-error-code-mapping",level:2},{value:"iOS (StoreKit) Mapping",id:"ios-storekit-mapping",level:3},{value:"Android (Google Play Billing) Mapping",id:"android-google-play-billing-mapping",level:3},{value:"Testing Error Scenarios",id:"testing-error-scenarios",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"OpenIAP Specification Compliance",id:"openiap-specification-compliance",level:2},{value:"Migration Notes",id:"migration-notes",level:2},{value:"From Previous Versions",id:"from-previous-versions",level:3},{value:"From Other Libraries",id:"from-other-libraries",level:3},{value:"See Also",id:"see-also",level:2}];function t(e){const r={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"error-codes",children:"Error Codes"}),"\n",(0,i.jsx)(r.p,{children:"Comprehensive error handling reference for kmp-iap. The library follows the OpenIAP specification for standardized error codes across platforms."}),"\n",(0,i.jsx)(r.h2,{id:"error-types",children:"Error Types"}),"\n",(0,i.jsx)(r.h3,{id:"purchaseerror",children:"PurchaseError"}),"\n",(0,i.jsx)(r.p,{children:"The main error class for all IAP-related exceptions."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"data class PurchaseError(\n    val code: String,  // Error code from ErrorCode enum\n    val message: String,\n    val productId: String? = null\n) : Exception(message)\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Properties"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"code"})," - Standardized error code string (from ErrorCode enum)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"message"})," - Human-readable error description"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"productId"})," - Related product ID (optional)"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"openiap-error-code-reference",children:"OpenIAP Error Code Reference"}),"\n",(0,i.jsx)(r.p,{children:"kmp-iap implements all 27 standard OpenIAP error codes for consistent error handling across platforms."}),"\n",(0,i.jsx)(r.h3,{id:"errorcode-enum",children:"ErrorCode Enum"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"enum class ErrorCode {\n    // General Errors\n    E_UNKNOWN,                        // Unknown error occurred\n    E_DEVELOPER_ERROR,                // Developer configuration error\n    \n    // User Action Errors  \n    E_USER_CANCELLED,                 // User cancelled the purchase flow\n    E_USER_ERROR,                     // User-related error during purchase\n    E_DEFERRED_PAYMENT,               // Payment was deferred (pending family approval, etc.)\n    E_INTERRUPTED,                    // Purchase flow was interrupted\n    \n    // Product Errors\n    E_ITEM_UNAVAILABLE,               // Product not available in store\n    E_PRODUCT_NOT_AVAILABLE,          // Product SKU not found\n    E_PRODUCT_ALREADY_OWNED,          // Non-consumable product already purchased\n    E_ALREADY_OWNED,                  // Item already owned by user\n    \n    // Network & Service Errors\n    E_NETWORK_ERROR,                  // Network connection error\n    E_SERVICE_ERROR,                  // Store service error\n    E_REMOTE_ERROR,                   // Remote server error\n    E_CONNECTION_CLOSED,              // Connection to store service was closed\n    E_IAP_NOT_AVAILABLE,              // In-app purchase service not available\n    E_SYNC_ERROR,                     // Synchronization error with store\n    \n    // Validation Errors\n    E_RECEIPT_FAILED,                 // Receipt validation failed\n    E_RECEIPT_FINISHED,               // Receipt already processed/finished\n    E_RECEIPT_FINISHED_FAILED,        // Failed to finish receipt processing\n    E_TRANSACTION_VALIDATION_FAILED,  // Transaction validation failed\n    \n    // Platform-Specific Errors\n    E_PENDING,                        // Purchase is pending approval (Android)\n    E_NOT_ENDED,                      // Transaction not finished (iOS)\n    E_NOT_PREPARED,                   // Store connection not initialized\n    E_ALREADY_PREPARED,               // Store connection already initialized\n    E_BILLING_RESPONSE_JSON_PARSE_ERROR, // Failed to parse billing response (Android)\n    E_PURCHASE_ERROR,                 // General purchase error\n    E_ACTIVITY_UNAVAILABLE            // Activity context not available (Android)\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"error-code-details",children:"Error Code Details"}),"\n",(0,i.jsx)(r.h3,{id:"general-errors",children:"General Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_unknown",children:"E_UNKNOWN"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Unknown error occurred",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Log and report error for debugging"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_UNKNOWN.name -> {\n        // Log full error details\n        logger.error("Unknown IAP error", error)\n        showError("An unexpected error occurred. Please try again.")\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_developer_error",children:"E_DEVELOPER_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Developer configuration error",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Incorrect bundle ID"}),"\n",(0,i.jsx)(r.li,{children:"Missing entitlements"}),"\n",(0,i.jsx)(r.li,{children:"Invalid signing"}),"\n",(0,i.jsx)(r.li,{children:"Product not configured in store"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_DEVELOPER_ERROR.name -> {\n        if (BuildConfig.DEBUG) {\n            println("Developer error - check configuration:")\n            println("- App bundle ID matches store listing")\n            println("- In-app purchase entitlements enabled")\n            println("- Products configured in store console")\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"user-action-errors",children:"User Action Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_user_cancelled",children:"E_USER_CANCELLED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": User cancelled the purchase flow",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": No action needed - expected user behavior"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'kmpIapInstance.purchaseErrorListener.collect { error ->\n    when (error.code) {\n        ErrorCode.E_USER_CANCELLED.name -> {\n            // Don\'t show error - user intended to cancel\n            println("Purchase cancelled by user")\n        }\n        else -> showErrorDialog(error.message)\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_user_error",children:"E_USER_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": User-related error during purchase",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"User not signed in"}),"\n",(0,i.jsx)(r.li,{children:"Parental controls active"}),"\n",(0,i.jsx)(r.li,{children:"Payment method issues"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"e_deferred_payment",children:"E_DEFERRED_PAYMENT"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Payment was deferred (pending family approval, etc.)",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS (Ask to Buy), Android (Pending purchases)",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Wait for approval"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_DEFERRED_PAYMENT.name -> {\n        showInfo("Purchase is pending approval. You\'ll be notified when approved.")\n        // Store pending purchase for later processing\n        savePendingPurchase(purchase)\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_interrupted",children:"E_INTERRUPTED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Purchase flow was interrupted",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Retry the purchase"]}),"\n",(0,i.jsx)(r.h3,{id:"product-errors",children:"Product Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_item_unavailable",children:"E_ITEM_UNAVAILABLE"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Product not available in store",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Product not approved"}),"\n",(0,i.jsx)(r.li,{children:"Regional restrictions"}),"\n",(0,i.jsx)(r.li,{children:"Product removed from store"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"e_product_not_available",children:"E_PRODUCT_NOT_AVAILABLE"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Product SKU not found",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Invalid product ID"}),"\n",(0,i.jsx)(r.li,{children:"Typo in SKU"}),"\n",(0,i.jsx)(r.li,{children:"Product not yet published"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'try {\n    val products = kmpIapInstance.requestProducts(listOf("invalid_sku"))\n} catch (e: PurchaseError) {\n    when (e.code) {\n        ErrorCode.E_PRODUCT_NOT_AVAILABLE.name -> {\n            println("Product not found. Check product ID configuration.")\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_product_already_owned",children:"E_PRODUCT_ALREADY_OWNED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Non-consumable product already purchased",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Restore purchases"]}),"\n",(0,i.jsx)(r.h4,{id:"e_already_owned",children:"E_ALREADY_OWNED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Item already owned by user",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Check purchase history or restore"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_ALREADY_OWNED.name,\n    ErrorCode.E_PRODUCT_ALREADY_OWNED.name -> {\n        showInfo("You already own this product.")\n        // Refresh purchase state\n        kmpIapInstance.getAvailablePurchases()\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"network--service-errors",children:"Network & Service Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_network_error",children:"E_NETWORK_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Network connection error",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Retry with exponential backoff"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'private suspend fun handleNetworkError() {\n    var retryCount = 0\n    val maxRetries = 3\n    \n    while (retryCount < maxRetries) {\n        delay(1000L * (2.0.pow(retryCount).toLong()))\n        try {\n            kmpIapInstance.initConnection()\n            break // Success\n        } catch (e: PurchaseError) {\n            if (e.code != ErrorCode.E_NETWORK_ERROR.name || ++retryCount >= maxRetries) {\n                showError("Network error. Please check your connection.")\n                break\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_service_error",children:"E_SERVICE_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Store service error",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Retry later or check service status"]}),"\n",(0,i.jsx)(r.h4,{id:"e_remote_error",children:"E_REMOTE_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Remote server error",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Backend validation server down"}),"\n",(0,i.jsx)(r.li,{children:"API timeout"}),"\n",(0,i.jsx)(r.li,{children:"Server configuration issues"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"e_connection_closed",children:"E_CONNECTION_CLOSED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Connection to store service was closed",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Re-initialize connection"]}),"\n",(0,i.jsx)(r.h4,{id:"e_iap_not_available",children:"E_IAP_NOT_AVAILABLE"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": In-app purchase service not available",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"IAP disabled on device"}),"\n",(0,i.jsx)(r.li,{children:"Restricted user account"}),"\n",(0,i.jsx)(r.li,{children:"Store app not installed (Android)"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"e_sync_error",children:"E_SYNC_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Synchronization error with store",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Retry synchronization"]}),"\n",(0,i.jsx)(r.h3,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_receipt_failed",children:"E_RECEIPT_FAILED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Receipt validation failed",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Invalid receipt format"}),"\n",(0,i.jsx)(r.li,{children:"Signature verification failed"}),"\n",(0,i.jsx)(r.li,{children:"Receipt tampering detected"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'// Server-side validation example\nsuspend fun validatePurchase(purchase: Purchase): Boolean {\n    return try {\n        val response = api.validateReceipt(\n            receipt = purchase.transactionReceipt,\n            productId = purchase.productId\n        )\n        response.isValid\n    } catch (e: Exception) {\n        throw PurchaseError(\n            code = ErrorCode.E_RECEIPT_FAILED.name,\n            message = "Receipt validation failed"\n        )\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_receipt_finished",children:"E_RECEIPT_FINISHED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Receipt already processed/finished",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Check transaction history"]}),"\n",(0,i.jsx)(r.h4,{id:"e_receipt_finished_failed",children:"E_RECEIPT_FINISHED_FAILED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Failed to finish receipt processing",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Retry finishing transaction"]}),"\n",(0,i.jsx)(r.h4,{id:"e_transaction_validation_failed",children:"E_TRANSACTION_VALIDATION_FAILED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Transaction validation failed",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Transaction data corrupted"}),"\n",(0,i.jsx)(r.li,{children:"Validation server error"}),"\n",(0,i.jsx)(r.li,{children:"Invalid transaction state"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"platform-specific-errors",children:"Platform-Specific Errors"}),"\n",(0,i.jsx)(r.h4,{id:"e_pending-android",children:"E_PENDING (Android)"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Purchase is pending approval",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platform"}),": Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Wait for purchase to be approved"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_PENDING.name -> {\n        if (getCurrentPlatform() == Platform.ANDROID) {\n            showInfo("Purchase is pending. Check back later.")\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_not_ended-ios",children:"E_NOT_ENDED (iOS)"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Transaction not finished",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platform"}),": iOS",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Call finishTransaction()"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"when (error.code) {\n    ErrorCode.E_NOT_ENDED.name -> {\n        // Finish the pending transaction\n        kmpIapInstance.finishTransaction(purchase)\n    }\n}\n"})}),"\n",(0,i.jsx)(r.h4,{id:"e_not_prepared",children:"E_NOT_PREPARED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Store connection not initialized",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Call initConnection() first"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'class IAPManager {\n    suspend fun ensureInitialized() {\n        if (!kmpIapInstance.isInitialized()) {\n            try {\n                kmpIapInstance.initConnection()\n            } catch (e: PurchaseError) {\n                if (e.code == ErrorCode.E_NOT_PREPARED.name) {\n                    throw PurchaseError(\n                        code = ErrorCode.E_NOT_PREPARED.name,\n                        message = "Failed to initialize IAP connection"\n                    )\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h4,{id:"e_already_prepared",children:"E_ALREADY_PREPARED"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Store connection already initialized",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Use existing connection"]}),"\n",(0,i.jsx)(r.h4,{id:"e_billing_response_json_parse_error-android",children:"E_BILLING_RESPONSE_JSON_PARSE_ERROR (Android)"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Failed to parse billing response",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platform"}),": Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Corrupted response from Google Play"}),"\n",(0,i.jsx)(r.li,{children:"Library version mismatch"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"e_purchase_error",children:"E_PURCHASE_ERROR"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": General purchase error",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platforms"}),": iOS, Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Recovery"}),": Check specific error details"]}),"\n",(0,i.jsx)(r.h4,{id:"e_activity_unavailable-android",children:"E_ACTIVITY_UNAVAILABLE (Android)"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description"}),": Activity context not available",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Platform"}),": Android",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"Common Causes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"App in background"}),"\n",(0,i.jsx)(r.li,{children:"Activity destroyed"}),"\n",(0,i.jsx)(r.li,{children:"No active activity"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'when (error.code) {\n    ErrorCode.E_ACTIVITY_UNAVAILABLE.name -> {\n        showError("Please ensure the app is in foreground and try again.")\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-centralized-error-handler",children:"1. Centralized Error Handler"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'class IAPErrorHandler(\n    private val kmpIap: KmpIAP\n) {\n    init {\n        scope.launch {\n            kmpIap.purchaseErrorListener.collect { error ->\n                handleError(error)\n            }\n        }\n    }\n    \n    private fun handleError(error: PurchaseError) {\n        // Log error\n        logger.error("IAP Error: ${error.code}", error)\n        \n        // Handle by type\n        when (error.code) {\n            ErrorCode.E_USER_CANCELLED.name -> {\n                // Silent - user action\n            }\n            ErrorCode.E_NETWORK_ERROR.name,\n            ErrorCode.E_SERVICE_ERROR.name -> {\n                showRetryableError(error)\n            }\n            ErrorCode.E_ALREADY_OWNED.name,\n            ErrorCode.E_PRODUCT_ALREADY_OWNED.name -> {\n                handleAlreadyOwned()\n            }\n            else -> {\n                showGenericError(error)\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"2-user-friendly-messages",children:"2. User-Friendly Messages"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"fun getErrorMessage(error: PurchaseError): String {\n    return ErrorCodeUtils.getErrorMessage(\n        ErrorCode.valueOf(error.code)\n    )\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-error-recovery-strategies",children:"3. Error Recovery Strategies"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:"class ErrorRecoveryManager(private val kmpIap: KmpIAP) {\n    \n    suspend fun recoverFromError(error: PurchaseError) {\n        when (error.code) {\n            ErrorCode.E_CONNECTION_CLOSED.name,\n            ErrorCode.E_NETWORK_ERROR.name -> {\n                attemptReconnection()\n            }\n            ErrorCode.E_ALREADY_OWNED.name,\n            ErrorCode.E_PRODUCT_ALREADY_OWNED.name -> {\n                refreshPurchases()\n            }\n            ErrorCode.E_RECEIPT_FAILED.name,\n            ErrorCode.E_TRANSACTION_VALIDATION_FAILED.name -> {\n                revalidatePurchases()\n            }\n            ErrorCode.E_NOT_PREPARED.name -> {\n                kmpIap.initConnection()\n            }\n        }\n    }\n    \n    private suspend fun attemptReconnection() {\n        repeat(3) { attempt ->\n            delay(2000L * (attempt + 1))\n            try {\n                kmpIap.initConnection()\n                return\n            } catch (e: PurchaseError) {\n                if (attempt == 2) throw e\n            }\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"4-debug-logging",children:"4. Debug Logging"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'if (BuildConfig.DEBUG) {\n    scope.launch {\n        kmpIapInstance.purchaseErrorListener.collect { error ->\n            println("=====================================")\n            println("IAP ERROR DETAILS")\n            println("=====================================")\n            println("Code: ${error.code}")\n            println("Message: ${error.message}")\n            println("Product ID: ${error.productId}")\n            println("Platform: ${getCurrentPlatform()}")\n            println("Timestamp: ${System.currentTimeMillis()}")\n            println("=====================================")\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"platform-error-code-mapping",children:"Platform Error Code Mapping"}),"\n",(0,i.jsx)(r.p,{children:"The library automatically maps platform-specific error codes to OpenIAP standard codes:"}),"\n",(0,i.jsx)(r.h3,{id:"ios-storekit-mapping",children:"iOS (StoreKit) Mapping"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Uses integer codes from StoreKit"}),"\n",(0,i.jsxs)(r.li,{children:["Mapped via ",(0,i.jsx)(r.code,{children:"ErrorCodeUtils.fromPlatformCode()"})]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"android-google-play-billing-mapping",children:"Android (Google Play Billing) Mapping"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Uses string error codes directly (matching enum names)"}),"\n",(0,i.jsxs)(r.li,{children:["Direct conversion via ",(0,i.jsx)(r.code,{children:"ErrorCode.valueOf()"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"testing-error-scenarios",children:"Testing Error Scenarios"}),"\n",(0,i.jsx)(r.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'@Test\nfun testErrorHandling() = runTest {\n    val error = PurchaseError(\n        code = ErrorCode.E_NETWORK_ERROR.name,\n        message = "Network unavailable"\n    )\n    \n    // Verify error code\n    assertEquals(ErrorCode.E_NETWORK_ERROR.name, error.code)\n    \n    // Verify error message utility\n    val message = ErrorCodeUtils.getErrorMessage(ErrorCode.E_NETWORK_ERROR)\n    assertEquals("Network connection error", message)\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-kotlin",children:'@Test\nfun testPurchaseErrorRecovery() = runTest {\n    // Simulate network failure\n    val error = PurchaseError(\n        code = ErrorCode.E_NETWORK_ERROR.name,\n        message = "Connection failed"\n    )\n    \n    val recoveryManager = ErrorRecoveryManager(kmpIap)\n    recoveryManager.recoverFromError(error)\n    \n    // Verify reconnection attempted\n    assertTrue(kmpIap.isInitialized())\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"openiap-specification-compliance",children:"OpenIAP Specification Compliance"}),"\n",(0,i.jsxs)(r.p,{children:["kmp-iap fully implements the ",(0,i.jsx)(r.a,{href:"https://openiap.dev/docs/errors",children:"OpenIAP error specification"}),", ensuring:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Consistent error codes"})," across all platforms"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Standardized error messages"})," for better UX"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Compatible with expo-iap"})," and other OpenIAP implementations"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"27 standard error codes"})," covering all IAP scenarios"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"migration-notes",children:"Migration Notes"}),"\n",(0,i.jsx)(r.h3,{id:"from-previous-versions",children:"From Previous Versions"}),"\n",(0,i.jsxs)(r.p,{children:["If migrating from older versions of kmp-iap, note that error codes now follow the OpenIAP standard. Update your error handling code to use the new ",(0,i.jsx)(r.code,{children:"ErrorCode"})," enum values."]}),"\n",(0,i.jsx)(r.h3,{id:"from-other-libraries",children:"From Other Libraries"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"expo-iap"}),": Error codes are identical (both follow OpenIAP)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"flutter_inapp_purchase"}),": Similar error codes with minor naming differences"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Native SDKs"}),": Platform codes are automatically mapped to OpenIAP codes"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://openiap.dev/docs/errors",children:"OpenIAP Error Specification"})}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/kmp-iap/docs/api/core-methods",children:"Core Methods"})," - Methods that may throw errors"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/kmp-iap/docs/api/listeners",children:"Event Listeners"})," - Error event handling"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/kmp-iap/docs/guides/troubleshooting",children:"Troubleshooting"})," - Common error solutions"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>d});var i=n(6540);const s={},o=i.createContext(s);function l(e){const r=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);