"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[1361],{3972:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var i=t(4848),s=t(8453);const r={sidebar_position:2},a="Quick Start",c={id:"getting-started/quickstart",title:"Quick Start",description:"Get up and running with KMP IAP in just a few minutes!",source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/kmp-iap/docs/getting-started/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/docs/getting-started/quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2}},o={},p=[{value:"Choose Your Approach",id:"choose-your-approach",level:2},{value:"Option 1: Global Instance (Simple)",id:"option-1-global-instance-simple",level:3},{value:"Option 2: Create Your Own Instance (Recommended for Testing)",id:"option-2-create-your-own-instance-recommended-for-testing",level:3},{value:"Basic Implementation",id:"basic-implementation",level:2},{value:"Using Global Instance",id:"using-global-instance",level:3},{value:"Using Your Own Instance",id:"using-your-own-instance",level:3},{value:"Using with Instance Creation",id:"using-with-instance-creation",level:2},{value:"Using with Compose Multiplatform",id:"using-with-compose-multiplatform",level:2},{value:"Platform-Specific Notes",id:"platform-specific-notes",level:2},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(e.p,{children:"Get up and running with KMP IAP in just a few minutes!"}),"\n",(0,i.jsx)(e.admonition,{title:"Version",type:"info",children:(0,i.jsxs)(e.p,{children:["This guide covers ",(0,i.jsx)(e.strong,{children:"v1.0.0-rc"})," with simplified API. For v1.0.0-rc, see the ",(0,i.jsx)(e.a,{href:"/blog/2025/08/20/rc1-simplified-api",children:"migration guide"}),"."]})}),"\n",(0,i.jsx)(e.h2,{id:"choose-your-approach",children:"Choose Your Approach"}),"\n",(0,i.jsx)(e.p,{children:"KMP IAP supports two usage patterns:"}),"\n",(0,i.jsx)(e.h3,{id:"option-1-global-instance-simple",children:"Option 1: Global Instance (Simple)"}),"\n",(0,i.jsxs)(e.p,{children:["Use the pre-created ",(0,i.jsx)(e.code,{children:"kmpIapInstance"})," for convenience and simplicity."]}),"\n",(0,i.jsx)(e.h3,{id:"option-2-create-your-own-instance-recommended-for-testing",children:"Option 2: Create Your Own Instance (Recommended for Testing)"}),"\n",(0,i.jsxs)(e.p,{children:["Create your own ",(0,i.jsx)(e.code,{children:"KmpIAP()"})," instances for better control, testing, or dependency injection."]}),"\n",(0,i.jsx)(e.h2,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,i.jsx)(e.h3,{id:"using-global-instance",children:"Using Global Instance"}),"\n",(0,i.jsx)(e.p,{children:"Here's a complete example using the global instance:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.types.*\nimport kotlinx.coroutines.*\n\nclass IAPManager {\n    private val scope = CoroutineScope(Dispatchers.Main)\n\n    suspend fun initialize() {\n        try {\n            // Initialize connection using global instance\n            kmpIapInstance.initConnection()\n\n            // Listen to purchase updates\n            scope.launch {\n                kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                    handlePurchaseUpdate(purchase)\n                }\n            }\n\n            // Listen to errors\n            scope.launch {\n                kmpIapInstance.purchaseErrorListener.collect { error ->\n                    handlePurchaseError(error)\n                }\n            }\n        } catch (e: Exception) {\n            println("Initialization failed: ${e.message}")\n        }\n    }\n\n    suspend fun loadProducts() {\n        try {\n            // v1.0.0-rc - DSL API\n            val products = kmpIapInstance.fetchProducts {\n                skus = listOf("product_1", "product_2")\n                type = ProductQueryType.InApp\n            }\n            println("Loaded ${products.size} products")\n        } catch (e: Exception) {\n            println("Failed to load products: ${e.message}")\n        }\n    }\n\n    suspend fun purchaseProduct(productId: String) {\n        try {\n            // v1.0.0-rc - DSL API\n            kmpIapInstance.requestPurchase {\n                ios {\n                    sku = productId\n                    quantity = 1\n                }\n                android {\n                    skus = listOf(productId)\n                }\n            }\n            // Purchase will be handled via purchaseUpdatedListener\n        } catch (e: Exception) {\n            println("Purchase failed: ${e.message}")\n        }\n    }\n\n    private suspend fun handlePurchaseUpdate(purchase: Purchase) {\n        // Verify purchase with your backend\n        val isValid = verifyPurchaseWithBackend(purchase)\n\n        if (isValid) {\n            // Grant the purchased content\n            grantPurchase(purchase)\n\n            // Finish the transaction\n            kmpIapInstance.finishTransaction(\n                purchase = purchase.toPurchaseInput(),\n                isConsumable = isConsumableProduct(purchase.productId)\n            )\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"using-your-own-instance",children:"Using Your Own Instance"}),"\n",(0,i.jsx)(e.p,{children:"Here's the same example creating your own instance:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.KmpIAP\nimport io.github.hyochan.kmpiap.types.*\nimport kotlinx.coroutines.*\n\nclass IAPManager {\n    private val scope = CoroutineScope(Dispatchers.Main)\n\n    suspend fun initialize() {\n        try {\n            // Initialize connection using instance\n            kmpIapInstance.initConnection()\n\n            // Listen to purchase updates\n            scope.launch {\n                kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                    handlePurchaseUpdate(purchase)\n                }\n            }\n\n            // Listen to errors\n            scope.launch {\n                kmpIapInstance.purchaseErrorListener.collect { error ->\n                    handlePurchaseError(error)\n                }\n            }\n        } catch (e: Exception) {\n            println("Initialization failed: ${e.message}")\n        }\n    }\n\n    suspend fun loadProducts() {\n        try {\n            // Load in-app products - v1.0.0-rc DSL API\n            val products = kmpIapInstance.fetchProducts {\n                skus = listOf("remove_ads", "premium_upgrade")\n                type = ProductQueryType.InApp\n            }\n\n            products.forEach { product ->\n                println("Product: ${product.id} - ${product.price}")\n            }\n        } catch (e: Exception) {\n            println("Failed to load products: ${e.message}")\n        }\n    }\n\n    suspend fun purchaseProduct(productId: String) {\n        try {\n            // Request purchase - v1.0.0-rc DSL API\n            kmpIapInstance.requestPurchase {\n                ios {\n                    sku = productId\n                    quantity = 1\n                }\n                android {\n                    skus = listOf(productId)\n                }\n            }\n            // Purchase will be handled in purchaseUpdatedListener\n        } catch (e: Exception) {\n            println("Purchase request failed: ${e.message}")\n        }\n    }\n\n    private suspend fun handlePurchaseUpdate(purchase: Purchase) {\n        // IMPORTANT: Server-side receipt validation should be performed here\n        // val isValid = validateReceiptOnServer(purchase.transactionReceipt)\n\n        // For this example, we\'ll assume validation passed\n        val isValid = true\n\n        if (isValid) {\n            // Deliver the product\n            deliverProduct(purchase.productId)\n\n            // Finish the transaction\n            kmpIapInstance.finishTransaction(\n                purchase = purchase.toPurchaseInput(),\n                isConsumable = true // true for consumables, false for subscriptions\n            )\n        }\n    }\n\n    private fun handlePurchaseError(error: PurchaseError) {\n        when (error.code) {\n            ErrorCode.UserCancelled -> {\n                println("User cancelled the purchase")\n            }\n            ErrorCode.ProductNotAvailable -> {\n                println("Item is not available")\n            }\n            else -> {\n                println("Purchase failed: ${error.message}")\n            }\n        }\n    }\n\n    private fun deliverProduct(productId: String) {\n        // Implement your product delivery logic\n        println("Product delivered: $productId")\n    }\n\n    fun disconnect() {\n        kmpIapInstance.endConnection()\n        scope.cancel()\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"using-with-instance-creation",children:"Using with Instance Creation"}),"\n",(0,i.jsx)(e.p,{children:"For cases where you need more control (like testing or dependency injection):"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kotlin",children:"import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.types.*\n\nclass IAPService {\n\n    suspend fun initialize() {\n        // Initialize connection\n        kmpIapInstance.initConnection()\n\n        // Set up listeners\n        launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                // Handle purchase\n                kmpIapInstance.finishTransaction(purchase.toPurchaseInput(), isConsumable = true)\n            }\n        }\n    }\n\n    suspend fun purchaseItem(productId: String) {\n        // v1.0.0-rc - DSL API\n        kmpIapInstance.requestPurchase {\n            ios {\n                sku = productId\n                quantity = 1\n            }\n            android {\n                skus = listOf(productId)\n            }\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"using-with-compose-multiplatform",children:"Using with Compose Multiplatform"}),"\n",(0,i.jsx)(e.p,{children:"Here's how to use KMP IAP in a Compose Multiplatform app:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kotlin",children:'import androidx.compose.runtime.*\nimport androidx.compose.material3.*\nimport io.github.hyochan.kmpiap.KmpIAP\nimport io.github.hyochan.kmpiap.types.*\n\n@Composable\nfun StoreScreen() {\n    var products by remember { mutableStateOf<List<Product>>(emptyList()) }\n    var isLoading by remember { mutableStateOf(false) }\n    val scope = rememberCoroutineScope()\n\n    LaunchedEffect(Unit) {\n        // Initialize connection\n        kmpIapInstance.initConnection()\n\n        // Load products\n        isLoading = true\n        try {\n            // v1.0.0-rc - DSL API\n            products = kmpIapInstance.fetchProducts {\n                skus = listOf("product_1", "product_2")\n                type = ProductQueryType.InApp\n            }\n        } finally {\n            isLoading = false\n        }\n\n        // Listen for purchases\n        launch {\n            kmpIapInstance.purchaseUpdatedListener.collect { purchase ->\n                // Handle successful purchase\n                kmpIapInstance.finishTransaction(purchase.toPurchaseInput(), isConsumable = true)\n            }\n        }\n    }\n\n    Column {\n        products.forEach { product ->\n            Card(\n                onClick = {\n                    // Purchase product\n                    scope.launch {\n                        // v1.0.0-rc - DSL API\n                        kmpIapInstance.requestPurchase {\n                            ios {\n                                sku = product.id\n                                quantity = 1\n                            }\n                            android {\n                                skus = listOf(product.id)\n                            }\n                        }\n                    }\n                }\n            ) {\n                Text("${product.title} - ${product.price}")\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"platform-specific-notes",children:"Platform-Specific Notes"}),"\n",(0,i.jsx)(e.h3,{id:"android",children:"Android"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Make sure your app is signed with the release key when testing"}),"\n",(0,i.jsx)(e.li,{children:"Upload your app to Google Play Console (at least to internal testing)"}),"\n",(0,i.jsx)(e.li,{children:"Add test accounts in Google Play Console"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"ios",children:"iOS"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Test with sandbox accounts during development"}),"\n",(0,i.jsx)(e.li,{children:"Use StoreKit configuration files for local testing"}),"\n",(0,i.jsx)(e.li,{children:"Remember to handle promotional offers if needed"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Learn about ",(0,i.jsx)(e.a,{href:"/kmp-iap/docs/guides/basic-setup",children:"Basic Setup"})]}),"\n",(0,i.jsxs)(e.li,{children:["Understand ",(0,i.jsx)(e.a,{href:"/kmp-iap/docs/guides/purchases",children:"Purchase Flow"})]}),"\n",(0,i.jsxs)(e.li,{children:["Master ",(0,i.jsx)(e.a,{href:"/kmp-iap/docs/guides/lifecycle",children:"Purchase Lifecycle"})]}),"\n",(0,i.jsxs)(e.li,{children:["Check ",(0,i.jsx)(e.a,{href:"/kmp-iap/docs/guides/troubleshooting",children:"Troubleshooting"})]}),"\n"]})]})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function a(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);