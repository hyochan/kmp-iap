"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[7288],{752:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var r=i(4848),s=i(8453);const t={sidebar_position:1},o="Basic Setup",a={id:"guides/basic-setup",title:"Basic Setup",description:"This guide walks you through the complete setup process for KMP IAP in your Kotlin Multiplatform project.",source:"@site/versioned_docs/version-1.0.0-beta/guides/basic-setup.md",sourceDirName:"guides",slug:"/guides/basic-setup",permalink:"/kmp-iap/docs/1.0.0-beta/guides/basic-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/versioned_docs/version-1.0.0-beta/guides/basic-setup.md",tags:[],version:"1.0.0-beta",sidebarPosition:1,frontMatter:{sidebar_position:1}},c={},d=[{value:"Project Configuration",id:"project-configuration",level:2},{value:"1. Add Dependencies",id:"1-add-dependencies",level:3},{value:"2. Platform Configuration",id:"2-platform-configuration",level:3},{value:"Android Configuration",id:"android-configuration",level:4},{value:"iOS Configuration",id:"ios-configuration",level:4},{value:"Implementation",id:"implementation",level:2},{value:"1. Create IAP Manager",id:"1-create-iap-manager",level:3},{value:"2. Initialize in Your App",id:"2-initialize-in-your-app",level:3},{value:"Android",id:"android",level:4},{value:"iOS",id:"ios",level:4},{value:"3. Use in Your UI",id:"3-use-in-your-ui",level:3},{value:"Testing",id:"testing",level:2},{value:"Android Testing",id:"android-testing",level:3},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Connection Issues",id:"connection-issues",level:3},{value:"Product Not Found",id:"product-not-found",level:3},{value:"Purchase Failures",id:"purchase-failures",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,r.jsx)(e.p,{children:"This guide walks you through the complete setup process for KMP IAP in your Kotlin Multiplatform project."}),"\n",(0,r.jsx)(e.h2,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,r.jsx)(e.h3,{id:"1-add-dependencies",children:"1. Add Dependencies"}),"\n",(0,r.jsxs)(e.p,{children:["In your shared module's ",(0,r.jsx)(e.code,{children:"build.gradle.kts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation("io.github.hyochan:kmp-iap:1.0.0-rc.2")\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-platform-configuration",children:"2. Platform Configuration"}),"\n",(0,r.jsx)(e.h4,{id:"android-configuration",children:"Android Configuration"}),"\n",(0,r.jsxs)(e.p,{children:["In your Android app module's ",(0,r.jsx)(e.code,{children:"build.gradle.kts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"android {\n    defaultConfig {\n        // Ensure minimum SDK is 24 or higher\n        minSdk = 24\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Add to your ",(0,r.jsx)(e.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",children:'<uses-permission android:name="com.android.vending.BILLING" />\n'})}),"\n",(0,r.jsx)(e.h4,{id:"ios-configuration",children:"iOS Configuration"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"In Xcode, add the In-App Purchase capability:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Select your app target"}),"\n",(0,r.jsx)(e.li,{children:'Go to "Signing & Capabilities"'}),"\n",(0,r.jsx)(e.li,{children:'Click "+" and add "In-App Purchase"'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Configure your products in App Store Connect"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(e.h3,{id:"1-create-iap-manager",children:"1. Create IAP Manager"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.KmpIAP\nimport io.github.hyochan.kmpiap.types.*\n\n```kotlin\nimport io.github.hyochan.kmpiap.KmpIAP\nimport io.github.hyochan.kmpiap.types.*\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\n\nobject IAPManager {\n    private val kmpIAP = KmpIAP()  // Create instance\n    private val scope = CoroutineScope(Dispatchers.Main + SupervisorJob())\n    \n    // State management\n    private val _isConnected = MutableStateFlow(false)\n    val isConnected: StateFlow<Boolean> = _isConnected.asStateFlow()\n    \n    private val _products = MutableStateFlow<List<Product>>(emptyList())\n    val products: StateFlow<List<Product>> = _products.asStateFlow()\n    \n    private val _subscriptions = MutableStateFlow<List<Product>>(emptyList())\n    val subscriptions: StateFlow<List<Product>> = _subscriptions.asStateFlow()\n    \n    fun initialize() {\n        scope.launch {\n            try {\n                kmpIAP.initConnection()\n                _isConnected.value = true\n                \n                // Set up purchase listeners\n                setupPurchaseListeners()\n                \n                // Load products\n                loadProducts()\n            } catch (e: Exception) {\n                println("IAP initialization failed: ${e.message}")\n                _isConnected.value = false\n            }\n        }\n    }\n    \n    private fun setupPurchaseListeners() {\n        scope.launch {\n            // Listen for purchase updates\n            kmpIAP.purchaseUpdatedListener.collect { purchase ->\n                handlePurchaseUpdate(purchase)\n            }\n        }\n        \n        scope.launch {\n            // Listen for purchase errors\n            kmpIAP.purchaseErrorListener.collect { error ->\n                handlePurchaseError(error)\n            }\n        }\n    }\n    \n    private suspend fun loadProducts() {\n        try {\n            // Load in-app products\n            val productList = kmpIAP.requestProducts(\n                ProductRequest(\n                    skus = listOf("remove_ads", "premium_features"),\n                    type = ProductType.INAPP\n                )\n            )\n            _products.value = productList\n            \n            // Load subscriptions\n            val subsList = kmpIAP.requestProducts(\n                ProductRequest(\n                    skus = listOf("monthly_sub", "yearly_sub"),\n                    type = ProductType.SUBS\n                )\n            )\n            _subscriptions.value = subsList\n        } catch (e: Exception) {\n            println("Failed to load products: ${e.message}")\n        }\n    }\n    \n    suspend fun purchaseProduct(productId: String) {\n        kmpIAP.requestPurchase(\n            UnifiedPurchaseRequest(\n                sku = productId,\n                quantity = 1\n            )\n        )\n    }\n    \n    suspend fun purchaseSubscription(productId: String) {\n        kmpIAP.requestPurchase(\n            UnifiedPurchaseRequest(\n                sku = productId,\n                quantity = 1\n            )\n        )\n    }\n    \n    private suspend fun handlePurchaseUpdate(purchase: Purchase) {\n        // Purchase is valid if returned from purchaseUpdatedListener flow\n        // Process the purchase\n        // Verify purchase with your backend\n        val isValid = verifyPurchaseWithBackend(purchase)\n        \n        if (isValid) {\n            // Grant entitlement\n            grantEntitlement(purchase.productId)\n            \n            // Finish transaction\n            kmpIAP.finishTransaction(\n                purchase,\n                isConsumable = isConsumableProduct(purchase.productId)\n            )\n        }\n        }\n    }\n    \n    private fun handlePurchaseError(error: PurchaseError) {\n        when (error.code) {\n            ErrorCode.USER_CANCELLED -> {\n                // User cancelled, no action needed\n            }\n            ErrorCode.PRODUCT_ALREADY_OWNED -> {\n                // Item already owned, restore it\n                restorePurchases()\n            }\n            else -> {\n                // Show error to user\n                showError(error.message)\n            }\n        }\n    }\n    \n    suspend fun restorePurchases() {\n        val purchases = kmpIAP.getAvailablePurchases()\n        purchases.forEach { purchase ->\n            grantEntitlement(purchase.productId)\n        }\n    }\n    \n    private suspend fun verifyPurchaseWithBackend(purchase: Purchase): Boolean {\n        // Implement your backend verification\n        // This is a simplified example\n        return true\n    }\n    \n    private fun grantEntitlement(productId: String) {\n        // Grant the appropriate entitlement based on productId\n        when (productId) {\n            "remove_ads" -> UserSettings.adsRemoved = true\n            "premium_features" -> UserSettings.isPremium = true\n            // Handle other products\n        }\n    }\n    \n    private fun isConsumableProduct(productId: String): Boolean {\n        // Define which products are consumable\n        return when (productId) {\n            "coins_pack_100", "coins_pack_500" -> true\n            else -> false\n        }\n    }\n    \n    private fun notifyUserOfPendingPurchase() {\n        // Notify user that purchase is pending\n    }\n    \n    private fun showError(message: String) {\n        // Show error message to user\n    }\n    \n    fun cleanup() {\n        scope.cancel()\n        runBlocking {\n            kmpIAP.endConnection()\n        }\n    }\n}\n\n// Simple user settings example\nobject UserSettings {\n    var adsRemoved: Boolean = false\n    var isPremium: Boolean = false\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-initialize-in-your-app",children:"2. Initialize in Your App"}),"\n",(0,r.jsx)(e.h4,{id:"android",children:"Android"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Initialize IAP\n        IAPManager.initialize()\n        \n        setContent {\n            MyApp()\n        }\n    }\n    \n    override fun onDestroy() {\n        super.onDestroy()\n        IAPManager.cleanup()\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"ios",children:"iOS"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-swift",children:"import UIKit\nimport shared\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) -> Bool {\n        // Initialize IAP\n        IAPManager.shared.initialize()\n        return true\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-use-in-your-ui",children:"3. Use in Your UI"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:"@Composable\nfun StoreScreen() {\n    val products by IAPManager.products.collectAsState()\n    val subscriptions by IAPManager.subscriptions.collectAsState()\n    \n    LazyColumn {\n        items(products) { product ->\n            ProductCard(\n                product = product,\n                onPurchase = {\n                    lifecycleScope.launch {\n                        IAPManager.purchaseProduct(product.productId)\n                    }\n                }\n            )\n        }\n        \n        items(subscriptions) { subscription ->\n            SubscriptionCard(\n                subscription = subscription,\n                onPurchase = {\n                    lifecycleScope.launch {\n                        IAPManager.purchaseSubscription(subscription.productId)\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun ProductCard(product: Product, onPurchase: () -> Unit) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(8.dp)\n    ) {\n        Row(\n            modifier = Modifier.padding(16.dp),\n            horizontalArrangement = Arrangement.SpaceBetween,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Column(modifier = Modifier.weight(1f)) {\n                Text(\n                    text = product.title,\n                    style = MaterialTheme.typography.h6\n                )\n                Text(\n                    text = product.description,\n                    style = MaterialTheme.typography.body2\n                )\n            }\n            Button(onClick = onPurchase) {\n                Text(product.localizedPrice)\n            }\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(e.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Upload your app to Google Play Console (at least Internal Testing)"}),"\n",(0,r.jsx)(e.li,{children:"Add test accounts in Google Play Console"}),"\n",(0,r.jsx)(e.li,{children:"Test with a signed APK"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Create sandbox test accounts in App Store Connect"}),"\n",(0,r.jsx)(e.li,{children:"Use StoreKit Configuration file for local testing"}),"\n",(0,r.jsx)(e.li,{children:"Test on a real device for best results"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(e.h3,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Ensure you're calling ",(0,r.jsx)(e.code,{children:"initConnection()"})," before any other operations"]}),"\n",(0,r.jsx)(e.li,{children:"Check network connectivity"}),"\n",(0,r.jsx)(e.li,{children:"Verify store configuration"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"product-not-found",children:"Product Not Found"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Verify product IDs match exactly with store configuration"}),"\n",(0,r.jsx)(e.li,{children:"Ensure products are active in store console"}),"\n",(0,r.jsx)(e.li,{children:"Wait for products to propagate (can take up to 24 hours)"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"purchase-failures",children:"Purchase Failures"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Check if user is signed in to store account"}),"\n",(0,r.jsx)(e.li,{children:"Verify payment methods are set up"}),"\n",(0,r.jsx)(e.li,{children:"Ensure app is properly signed for release"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Learn about ",(0,r.jsx)(e.a,{href:"/kmp-iap/docs/1.0.0-beta/guides/purchases",children:"Making Purchases"})]}),"\n",(0,r.jsxs)(e.li,{children:["Understand ",(0,r.jsx)(e.a,{href:"/kmp-iap/docs/1.0.0-beta/guides/lifecycle",children:"Purchase Lifecycle"})]}),"\n",(0,r.jsxs)(e.li,{children:["Check ",(0,r.jsx)(e.a,{href:"/kmp-iap/docs/1.0.0-beta/guides/troubleshooting",children:"Troubleshooting"})]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function o(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);