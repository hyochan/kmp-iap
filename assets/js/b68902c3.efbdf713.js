"use strict";(self.webpackChunkkmp_iap_docs=self.webpackChunkkmp_iap_docs||[]).push([[3266],{3103:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var l=i(4848),r=i(8453);const t={},s="Alternative Billing",o={id:"guides/alternative-billing",title:"Alternative Billing",description:"This guide explains how to implement alternative billing functionality in your app using kmp-iap, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing.",source:"@site/docs/guides/alternative-billing.md",sourceDirName:"guides",slug:"/guides/alternative-billing",permalink:"/kmp-iap/docs/guides/alternative-billing",draft:!1,unlisted:!1,editUrl:"https://github.com/hyochan/kmp-iap/tree/main/docs/docs/guides/alternative-billing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Offer Code Redemption",permalink:"/kmp-iap/docs/guides/offer-code-redemption"},next:{title:"Troubleshooting",permalink:"/kmp-iap/docs/guides/troubleshooting"}},a={},c=[{value:"Official Documentation",id:"official-documentation",level:2},{value:"Apple (iOS)",id:"apple-ios",level:3},{value:"Google Play (Android)",id:"google-play-android",level:3},{value:"Platform Updates (2024)",id:"platform-updates-2024",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Overview",id:"overview",level:2},{value:"iOS Alternative Billing (External Purchase)",id:"ios-alternative-billing-external-purchase",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Important Notes",id:"important-notes",level:3},{value:"Complete iOS Example",id:"complete-ios-example",level:3},{value:"Android Alternative Billing",id:"android-alternative-billing",level:2},{value:"Configuration",id:"configuration-1",level:3},{value:"Mode 1: Alternative Billing Only",id:"mode-1-alternative-billing-only",level:3},{value:"Mode 2: User Choice Billing",id:"mode-2-user-choice-billing",level:3},{value:"Listening for User Choice Events",id:"listening-for-user-choice-events",level:3},{value:"Complete Cross-Platform Example",id:"complete-cross-platform-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"General",id:"general",level:3},{value:"iOS Specific",id:"ios-specific",level:3},{value:"Android Specific",id:"android-specific",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"iOS Issues",id:"ios-issues",level:3},{value:"&quot;Feature not supported&quot;",id:"feature-not-supported",level:4},{value:"&quot;External URL not opening&quot;",id:"external-url-not-opening",level:4},{value:"&quot;User stuck on external site&quot;",id:"user-stuck-on-external-site",level:4},{value:"Android Issues",id:"android-issues",level:3},{value:"&quot;Alternative billing not available&quot;",id:"alternative-billing-not-available",level:4},{value:"&quot;Token creation failed&quot;",id:"token-creation-failed",level:4},{value:"&quot;User choice dialog not showing&quot;",id:"user-choice-dialog-not-showing",level:4},{value:"Platform Requirements",id:"platform-requirements",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"iOS APIs",id:"ios-apis",level:3},{value:"Android APIs",id:"android-apis",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"alternative-billing",children:"Alternative Billing"}),"\n",(0,l.jsx)(n.p,{children:"This guide explains how to implement alternative billing functionality in your app using kmp-iap, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing."}),"\n",(0,l.jsx)(n.h2,{id:"official-documentation",children:"Official Documentation"}),"\n",(0,l.jsx)(n.h3,{id:"apple-ios",children:"Apple (iOS)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/external-purchase",children:"StoreKit External Purchase Documentation"})," - Official StoreKit external purchase API reference"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," - Entitlement configuration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/externalpurchasecustomlink",children:"ExternalPurchaseCustomLink API"})," - Custom link API documentation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://www.openiap.dev/docs/external-purchase",children:"OpenIAP External Purchase"})," - OpenIAP external purchase specification"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"google-play-android",children:"Google Play (Android)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative",children:"Alternative Billing APIs"})," - Official Android alternative billing API guide"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/13821247",children:"User Choice Billing Overview"})," - Understanding user choice billing"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12570971",children:"User Choice Billing Pilot"})," - Enrollment and setup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/10281818",children:"Payments Policy"})," - Google Play's payment policy"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/user-choice",children:"UX Guidelines (User Choice)"})," - User choice billing UX guidelines"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/billing-choice",children:"UX Guidelines (Alternative Billing)"})," - Alternative billing UX guidelines"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12348241",children:"EEA Alternative Billing"})," - European Economic Area specific guidance"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"platform-updates-2024",children:"Platform Updates (2024)"}),"\n",(0,l.jsx)(n.h4,{id:"ios",children:"iOS"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"US apps can use StoreKit External Purchase Link Entitlement"}),"\n",(0,l.jsx)(n.li,{children:"System disclosure sheet shown each time external link is accessed"}),"\n",(0,l.jsx)(n.li,{children:"Commission: 27% (reduced from 30%) for first year, 12% for subsequent years"}),"\n",(0,l.jsx)(n.li,{children:"EU apps have additional flexibility for external purchases"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"android",children:"Android"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"As of March 13, 2024: Alternative billing APIs must be used (manual reporting deprecated)"}),"\n",(0,l.jsx)(n.li,{children:"Service fee reduced by 4% when using alternative billing (e.g., 15% \u2192 11%)"}),"\n",(0,l.jsx)(n.li,{children:"Available in South Korea, India, and EEA"}),"\n",(0,l.jsx)(n.li,{children:"Gaming and non-gaming apps eligible (varies by region)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"Alternative billing enables developers to offer payment options outside of the platform's standard billing systems:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": Redirect users to external websites for payment (iOS 16.0+)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Use Google Play's alternative billing options (requires approval)"]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{title:"Platform Approval Required",type:"warning",children:[(0,l.jsx)(n.p,{children:"Both platforms require special approval to use alternative billing:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": Must be approved for external purchase entitlement"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Must be approved for alternative billing in Google Play Console"]}),"\n"]})]}),"\n",(0,l.jsx)(n.h2,{id:"ios-alternative-billing-external-purchase",children:"iOS Alternative Billing (External Purchase)"}),"\n",(0,l.jsx)(n.p,{children:"On iOS, alternative billing works by redirecting users to an external website where they complete the purchase."}),"\n",(0,l.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Configure iOS external purchase entitlements in your iOS project:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Entitlements (iosApp.entitlements):"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    \x3c!-- Required: External purchase entitlement --\x3e\n    <key>com.apple.developer.storekit.external-purchase</key>\n    <true/>\n\n    \x3c!-- Optional: External purchase link entitlement --\x3e\n    <key>com.apple.developer.storekit.external-purchase-link</key>\n    <true/>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Info.plist:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    \x3c!-- Countries where external purchases are supported (ISO 3166-1 alpha-2 uppercase) --\x3e\n    <key>SKExternalPurchase</key>\n    <dict>\n        <key>AllowedCountries</key>\n        <array>\n            <string>KR</string>\n            <string>NL</string>\n            <string>DE</string>\n            <string>FR</string>\n        </array>\n    </dict>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsxs)(n.admonition,{title:"Requirements",type:"warning",children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Approval Required"}),": You must obtain approval from Apple to use external purchase features"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"URL Format"}),": URLs must use HTTPS and be valid"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Supported Regions"}),": Different features support different regions (EU, US, etc.)"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," for details."]})]}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.presentExternalPurchaseLinkIOS\n\n// Present external purchase link\nval result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n    url = "https://your-site.com/checkout"\n)\n\nif (result.success) {\n    println("User was redirected to external URL")\n} else {\n    println("Error: ${result.error}")\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS 16.0+ Required"}),": External purchase links only work on iOS 16.0 and later"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No Purchase Callback"}),": The ",(0,l.jsx)(n.code,{children:"purchaseUpdatedListener"})," will NOT fire when using external URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Link Required"}),": Implement deep linking to return users to your app after purchase"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Manual Validation"}),": You must validate purchases on your backend server"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"complete-ios-example",children:"Complete iOS Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.presentExternalPurchaseLinkIOS\nimport kotlinx.coroutines.launch\n\nfun handleExternalPurchase(productId: String) {\n    scope.launch {\n        try {\n            val result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n                url = "https://your-site.com/checkout?product=$productId"\n            )\n\n            if (result.success) {\n                // User was redirected to external site\n                // Implement deep linking to handle return to app\n                println("Redirected to external checkout")\n            } else {\n                println("Error: ${result.error}")\n            }\n        } catch (e: Exception) {\n            println("Failed to present external link: ${e.message}")\n        }\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"android-alternative-billing",children:"Android Alternative Billing"}),"\n",(0,l.jsx)(n.p,{children:"Android supports two alternative billing modes:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Alternative Billing Only"}),": Users can ONLY use your payment system"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User Choice Billing"}),": Users choose between Google Play or your payment system"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Set the billing mode when initializing the connection:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.openiap.AlternativeBillingModeAndroid\nimport io.github.hyochan.kmpiap.openiap.InitConnectionConfig\n\n// Initialize with alternative billing mode\nval config = InitConnectionConfig(\n    alternativeBillingModeAndroid = AlternativeBillingModeAndroid.AlternativeOnly\n    // Or: AlternativeBillingModeAndroid.UserChoice\n    // Or: AlternativeBillingModeAndroid.None (default)\n)\n\nval connected = kmpIapInstance.initConnection(config)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mode-1-alternative-billing-only",children:"Mode 1: Alternative Billing Only"}),"\n",(0,l.jsx)(n.p,{children:"This mode requires a manual 3-step flow:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\n\nsuspend fun handleAlternativeBillingOnly(productId: String) {\n    try {\n        // Step 1: Check availability\n        val isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n        if (!isAvailable) {\n            println("Alternative billing not available")\n            return\n        }\n\n        // Step 2: Show information dialog\n        val userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\n        if (!userAccepted) {\n            println("User declined alternative billing")\n            return\n        }\n\n        // Step 2.5: Process payment with your payment system\n        // ... your payment processing logic here ...\n\n        // Step 3: Create reporting token (after successful payment)\n        val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n\n        if (token != null) {\n            // Step 4: Report token to Google Play backend within 24 hours\n            reportToGoogleBackend(token)\n            println("Alternative billing completed")\n        } else {\n            println("Failed to create token")\n        }\n    } catch (e: Exception) {\n        println("Alternative billing error: ${e.message}")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"mode-2-user-choice-billing",children:"Mode 2: User Choice Billing"}),"\n",(0,l.jsx)(n.p,{children:"With user choice, Google automatically shows a selection dialog:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.requestPurchase\nimport io.github.hyochan.kmpiap.openiap.AlternativeBillingModeAndroid\nimport io.github.hyochan.kmpiap.openiap.InitConnectionConfig\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.launch\n\n// Initialize with user choice mode\nval config = InitConnectionConfig(\n    alternativeBillingModeAndroid = AlternativeBillingModeAndroid.UserChoice\n)\nkmpIapInstance.initConnection(config)\n\n// Listen for user choice events\nscope.launch {\n    kmpIapInstance.userChoiceBillingListener.collect { details ->\n        println("User selected alternative billing")\n        println("Products: ${details.products}")\n        println("Token: ${details.externalTransactionToken}")\n\n        // Process payment with your system\n        // ... your payment processing logic ...\n\n        // Report token to Google (token is provided in details)\n        reportToGoogleBackend(details.externalTransactionToken)\n    }\n}\n\nsuspend fun handleUserChoicePurchase(productId: String) {\n    try {\n        // Request purchase - Google will show selection dialog\n        kmpIapInstance.requestPurchase {\n            android {\n                skus = listOf(productId)\n            }\n        }\n\n        // If user selects Google Play: purchaseUpdatedListener fires\n        // If user selects alternative: userChoiceBillingListener fires\n        println("Purchase requested")\n    } catch (e: Exception) {\n        println("Purchase error: ${e.message}")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"listening-for-user-choice-events",children:"Listening for User Choice Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.launch\n\n// Listen for user choice billing events\nscope.launch {\n    kmpIapInstance.userChoiceBillingListener.collect { details ->\n        println("User chose alternative billing")\n        println("Products: ${details.products}")\n        println("Token: ${details.externalTransactionToken}")\n\n        // Process payment with your system\n        processAlternativePayment(details.products)\n\n        // Report token to Google (token is already provided in details)\n        // No need to call createAlternativeBillingTokenAndroid() for UserChoice mode\n        reportToGoogleBackend(details.externalTransactionToken)\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"complete-cross-platform-example",children:"Complete Cross-Platform Example"}),"\n",(0,l.jsxs)(n.p,{children:["See the ",(0,l.jsx)(n.a,{href:"https://github.com/hyochan/kmp-iap/blob/main/example/composeApp/src/commonMain/kotlin/dev/hyo/martie/screens/AlternativeBillingScreen.kt",children:"AlternativeBillingScreen.kt"})," in the example app for a complete implementation:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'import io.github.hyochan.kmpiap.kmpIapInstance\nimport io.github.hyochan.kmpiap.openiap.*\nimport kotlinx.coroutines.launch\n\n@Composable\nfun AlternativeBillingScreen() {\n    var selectedProduct by remember { mutableStateOf<ProductCommon?>(null) }\n    var billingMode by remember {\n        mutableStateOf(AlternativeBillingModeAndroid.AlternativeOnly)\n    }\n    var externalUrl by remember { mutableStateOf("https://your-site.com") }\n\n    LaunchedEffect(Unit) {\n        // Initialize connection with alternative billing\n        val config = if (getPlatformName() == "Android") {\n            InitConnectionConfig(alternativeBillingModeAndroid = billingMode)\n        } else null\n\n        kmpIapInstance.initConnection(config)\n    }\n\n    // Platform-specific purchase handling\n    fun handlePurchase(product: ProductCommon) {\n        scope.launch {\n            if (getPlatformName() == "iOS") {\n                // iOS: Use external URL\n                val result = kmpIapInstance.presentExternalPurchaseLinkIOS(\n                    url = "$externalUrl?product=${product.id}"\n                )\n                if (result.success) {\n                    println("Redirected to external checkout")\n                } else {\n                    println("Error: ${result.error}")\n                }\n            } else {\n                // Android: Handle based on billing mode\n                when (billingMode) {\n                    AlternativeBillingModeAndroid.AlternativeOnly -> {\n                        handleAndroidAlternativeBillingOnly(product)\n                    }\n                    AlternativeBillingModeAndroid.UserChoice -> {\n                        handleAndroidUserChoice(product)\n                    }\n                    else -> {\n                        println("Alternative billing not configured")\n                    }\n                }\n            }\n        }\n    }\n\n    // UI implementation...\n}\n\nsuspend fun handleAndroidAlternativeBillingOnly(product: ProductCommon) {\n    val isAvailable = kmpIapInstance.checkAlternativeBillingAvailabilityAndroid()\n    if (!isAvailable) {\n        println("Alternative billing not available")\n        return\n    }\n\n    val userAccepted = kmpIapInstance.showAlternativeBillingDialogAndroid()\n    if (!userAccepted) return\n\n    // Process payment with your system...\n\n    val token = kmpIapInstance.createAlternativeBillingTokenAndroid()\n    if (token != null) {\n        reportToGoogleBackend(token)\n    }\n}\n\nsuspend fun handleAndroidUserChoice(product: ProductCommon) {\n    try {\n        val purchase = kmpIapInstance.requestPurchase {\n            android {\n                skus = listOf(product.id)\n            }\n        }\n        println("Purchase completed via Google Play")\n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Validation"}),": Always validate purchases on your backend server"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Clear Communication"}),": Inform users they're leaving the app for external payment"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Linking"}),": Implement deep links to return users to your app (iOS)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Error Handling"}),": Handle all error cases gracefully"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ios-specific",children:"iOS Specific"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS Version Check"}),": Verify iOS 16.0+ before enabling alternative billing"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"URL Validation"}),": Ensure external URLs are valid and secure (HTTPS)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No Purchase Events"}),": Don't rely on ",(0,l.jsx)(n.code,{children:"purchaseUpdatedListener"})," when using external URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Link Implementation"}),": Crucial for returning users to your app"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-specific",children:"Android Specific"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"24-Hour Reporting"}),": Report tokens to Google within 24 hours"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Mode Selection"}),": Choose the appropriate mode for your use case"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User Experience"}),": User Choice mode provides better UX but shares revenue with Google"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Integration"}),": Implement proper token reporting to Google Play"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Test on real devices running iOS 16.0+"}),"\n",(0,l.jsx)(n.li,{children:"Verify external URL opens correctly in Safari"}),"\n",(0,l.jsx)(n.li,{children:"Test deep link return flow"}),"\n",(0,l.jsx)(n.li,{children:"Ensure StoreKit is configured for alternative billing"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Configure alternative billing in Google Play Console"}),"\n",(0,l.jsx)(n.li,{children:"Test both billing modes separately"}),"\n",(0,l.jsx)(n.li,{children:"Verify token generation and reporting"}),"\n",(0,l.jsx)(n.li,{children:"Test user choice dialog behavior"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"ios-issues",children:"iOS Issues"}),"\n",(0,l.jsx)(n.h4,{id:"feature-not-supported",children:'"Feature not supported"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ensure iOS 16.0 or later"}),"\n",(0,l.jsx)(n.li,{children:"Verify external purchase entitlement is approved"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"external-url-not-opening",children:'"External URL not opening"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Check URL format (must be valid HTTPS)"}),"\n",(0,l.jsx)(n.li,{children:"Verify entitlements are properly configured"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"user-stuck-on-external-site",children:'"User stuck on external site"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement deep linking to return to app"}),"\n",(0,l.jsx)(n.li,{children:"Test deep link handling"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-issues",children:"Android Issues"}),"\n",(0,l.jsx)(n.h4,{id:"alternative-billing-not-available",children:'"Alternative billing not available"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify Google Play approval"}),"\n",(0,l.jsx)(n.li,{children:"Check device and Play Store version"}),"\n",(0,l.jsx)(n.li,{children:"Ensure billing mode is configured"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"token-creation-failed",children:'"Token creation failed"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify billing mode configuration"}),"\n",(0,l.jsx)(n.li,{children:"Ensure user completed info dialog"}),"\n",(0,l.jsx)(n.li,{children:"Check Google Play Console settings"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"user-choice-dialog-not-showing",children:'"User choice dialog not showing"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Verify ",(0,l.jsx)(n.code,{children:"AlternativeBillingModeAndroid.UserChoice"})," is set"]}),"\n",(0,l.jsx)(n.li,{children:"Ensure Google Play configuration is correct"}),"\n",(0,l.jsx)(n.li,{children:"Check device compatibility"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"platform-requirements",children:"Platform Requirements"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": iOS 16.0+ for external purchase URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Google Play Billing Library 8.0+ with alternative billing enabled"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Approval"}),": Both platforms require approval for alternative billing features"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,l.jsx)(n.h3,{id:"ios-apis",children:"iOS APIs"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"presentExternalPurchaseLinkIOS(url: String): ExternalPurchaseLinkResultIOS"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"canPresentExternalPurchaseNoticeIOS(): Boolean"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"presentExternalPurchaseNoticeSheetIOS(): ExternalPurchaseNoticeResultIOS"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-apis",children:"Android APIs"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"checkAlternativeBillingAvailabilityAndroid(): Boolean"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"showAlternativeBillingDialogAndroid(): Boolean"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"createAlternativeBillingTokenAndroid(): String?"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"userChoiceBillingListener: Flow<UserChoiceBillingDetails>"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.openiap.dev/docs/apis#alternative-billing",children:"OpenIAP Alternative Billing Specification"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/hyochan/kmp-iap/blob/main/example/composeApp/src/commonMain/kotlin/dev/hyo/martie/screens/AlternativeBillingScreen.kt",children:"Alternative Billing Example App"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/guides/basic-setup",children:"Basic Setup Guide"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/kmp-iap/docs/guides/purchases",children:"Purchases Guide"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var l=i(6540);const r={},t=l.createContext(r);function s(e){const n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);