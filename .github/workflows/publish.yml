name: Publish
on:
  release:
    types: [released, prereleased]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., 1.0.0-alpha04)"
        required: true
        default: "1.0.0-alpha04"
        type: string
      dry_run:
        description: "Dry run (test without publishing)"
        required: false
        default: false
        type: boolean
jobs:
  publish:
    name: Release build and publish
    runs-on: macOS-latest
    permissions:
      contents: write  # Allow pushing commits
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create local.properties with version
        run: |
          echo "Creating local.properties with version..."
          cat > local.properties << EOF
          # Library version
          libraryVersion=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0-alpha04' }}
          
          # Central Portal credentials (from secrets)
          mavenCentralUsername=${{ secrets.MAVEN_CENTRAL_USERNAME }}
          mavenCentralPassword=${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          
          # Central Portal service configuration
          sonatypeRepositoryId=AUTO
          sonatypeAutomaticRelease=false
          
          # GPG signing
          signingInMemoryKeyId=${{ secrets.SIGNING_KEY_ID }}
          signingInMemoryKeyPassword=${{ secrets.SIGNING_PASSWORD || '' }}
          EOF
          
          echo "✅ local.properties created with version: $(grep libraryVersion local.properties | cut -d'=' -f2)"

      # GPG key file creation removed - we're using in-memory key directly via environment variable

      - name: Build library
        run: ./gradlew :library:build --no-configuration-cache

      - name: Test GPG Environment Setup
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Testing GPG Environment Setup ==="
          echo "Library version: $(grep libraryVersion local.properties | cut -d'=' -f2)"
          echo "SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}"
          echo "SIGNING_PASSWORD: $([ -n '${{ secrets.SIGNING_PASSWORD }}' ] && echo 'present' || echo 'missing')"
          echo "MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}"
          echo "MAVEN_CENTRAL_PASSWORD: $([ -n '${{ secrets.MAVEN_CENTRAL_PASSWORD }}' ] && echo 'present' || echo 'missing')"
          echo "GPG_KEY_CONTENTS: $([ -n '${{ secrets.GPG_KEY_CONTENTS }}' ] && echo 'present' || echo 'missing')"
          
          # Test that the GPG key starts with the expected header
          if [[ "${{ secrets.GPG_KEY_CONTENTS }}" == *"BEGIN PGP PRIVATE KEY BLOCK"* ]]; then
            echo "✅ GPG key format looks correct (contains PGP header)"
          else
            echo "❌ GPG key format may be incorrect (missing PGP header)"
          fi
          
          # Validate signing key ID length
          KEY_ID_LENGTH=${#SIGNING_KEY_ID}
          if [ $KEY_ID_LENGTH -eq 8 ]; then
            echo "✅ SIGNING_KEY_ID has correct length (8 characters)"
          else
            echo "❌ SIGNING_KEY_ID has incorrect length: $KEY_ID_LENGTH (should be 8)"
            echo "   Please use only the last 8 characters of your GPG key ID"
          fi

      - name: Dry run - Show what would be published
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "=== DRY RUN - No actual publishing ==="
          echo "Version: $(grep libraryVersion local.properties | cut -d'=' -f2)"
          echo "Library artifacts would be published to Maven Central"
          ./gradlew :library:tasks --group=publishing

      - name: Publish to MavenCentral
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Starting Maven Central Publishing ==="
          
          # Export environment variables (same as local script)
          export ORG_GRADLE_PROJECT_mavenCentralUsername="${{ secrets.MAVEN_CENTRAL_USERNAME }}"
          export ORG_GRADLE_PROJECT_mavenCentralPassword="${{ secrets.MAVEN_CENTRAL_PASSWORD }}"
          export ORG_GRADLE_PROJECT_signingInMemoryKeyId="${{ secrets.SIGNING_KEY_ID }}"
          export ORG_GRADLE_PROJECT_signingInMemoryKeyPassword="${{ secrets.SIGNING_PASSWORD || '' }}"
          export ORG_GRADLE_PROJECT_signingInMemoryKey="${{ secrets.GPG_KEY_CONTENTS }}"
          # Don't set signingInMemoryKeyFile when we have signingInMemoryKey directly
          export ORG_GRADLE_PROJECT_sonatypeRepositoryId="AUTO"
          export ORG_GRADLE_PROJECT_sonatypeAutomaticRelease="false"
          
          # Debug: Check if properties are being passed correctly
          echo "Checking gradle properties..."
          ./gradlew :library:properties | grep -E "signing|maven|central" || echo "Could not get properties"
          
          # Debug: Verify environment variables are set
          echo ""
          echo "=== Verifying Environment Variables ==="
          echo "signingInMemoryKeyId length: ${#ORG_GRADLE_PROJECT_signingInMemoryKeyId}"
          echo "signingInMemoryKey present: $([ -n "$ORG_GRADLE_PROJECT_signingInMemoryKey" ] && echo 'YES' || echo 'NO')"
          echo "signingInMemoryKey length: ${#ORG_GRADLE_PROJECT_signingInMemoryKey}"
          echo "First 50 chars of key: $(echo "$ORG_GRADLE_PROJECT_signingInMemoryKey" | head -c 50)"
          
          echo ""
          echo "Running: ./gradlew publishToMavenCentral --no-configuration-cache --stacktrace"
          
          # Run the same command as local script with stacktrace for debugging
          ./gradlew publishToMavenCentral --no-configuration-cache --stacktrace || {
            exit_code=$?
            echo "Build exited with code: $exit_code"
            
            # Check for known service cleanup error that can be ignored
            if [ $exit_code -eq 1 ]; then
              echo "⚠️  Build failed with exit code 1 - checking for known issues..."
              # Even if it fails, check if the artifacts were actually published
              echo "Check Maven Central for the artifacts: https://central.sonatype.com/artifact/io.github.hyochan/kmp-iap"
              # For now, we'll fail the build to see the actual error
              exit $exit_code
            else
              exit $exit_code
            fi
          }

      - name: Update README version
        if: github.event.inputs.dry_run != 'true' && success()
        run: |
          echo "Updating README.md with published version..."
          ./gradlew :library:updateReadmeVersion
          
          # Commit and push if README was changed
          if git diff --quiet README.md; then
            echo "README.md is already up to date"
          else
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add README.md
            git commit -m "chore: update README.md version to $(grep libraryVersion local.properties | cut -d'=' -f2)"
            git push
          fi

      - name: Publishing Success
        if: github.event.inputs.dry_run != 'true' && success()
        run: |
          VERSION=$(grep libraryVersion local.properties | cut -d'=' -f2)
          echo "✅ Successfully published to Maven Central!"
          echo "Library: io.github.hyochan:kmp-iap:$VERSION"
          echo "Check: https://central.sonatype.com/artifact/io.github.hyochan/kmp-iap"

      - name: Debug on Failure
        if: failure() && github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo ""
          echo "local.properties content:"
          cat local.properties || echo "local.properties not found"
          echo ""
          echo "GPG key file:"
          ls -la gpg_key_content.gpg || echo "GPG key file not found"
          echo ""
          echo "Gradle properties:"
          ./gradlew :library:properties | grep -E "(signing|maven|central)" || echo "Could not get properties"

